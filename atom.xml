<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芋泥の宝藏屋</title>
  
  <subtitle>dwhの博客</subtitle>
  <link href="https://dgithubq.github.io/atom.xml" rel="self"/>
  
  <link href="https://dgithubq.github.io/"/>
  <updated>2022-03-07T14:13:11.035Z</updated>
  <id>https://dgithubq.github.io/</id>
  
  <author>
    <name>dwh520dyn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java泛型入门</title>
    <link href="https://dgithubq.github.io/posts/5.html"/>
    <id>https://dgithubq.github.io/posts/5.html</id>
    <published>2022-03-07T13:58:00.000Z</published>
    <updated>2022-03-07T14:13:11.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型的理解和好处"><a href="#泛型的理解和好处" class="headerlink" title="泛型的理解和好处"></a>泛型的理解和好处</h2><ol><li>编译时，检查添加元素的类型，提高了安全性</li><li>减少了类型转换次数，提高了效率</li><li>不再提示编译警告</li></ol><h2 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h2><p>泛（广泛）型（类型）=&gt;<code>Integer,String,Dog</code></p><ol><li>泛型又叫参数化类型，是<code>jdk5.0</code>出现的新特性，解决数据类型的安全性问题。</li><li>在类声明或实例化时只要制定好需要的具体类型即可。</li><li>JAVA泛型可以保证如果程序在编译时没有警告，运行时就不会产生<code>ClassCastException</code>异常，同时，代码更加简洁。</li><li>泛型的作用是：可以在声明类时通过一个标识表示类中的某一个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。</li></ol><h2 id="泛型的语法"><a href="#泛型的语法" class="headerlink" title="泛型的语法"></a>泛型的语法</h2><h3 id="泛型的声明"><a href="#泛型的声明" class="headerlink" title="泛型的声明"></a>泛型的声明</h3><p>其中，T,K,V不代表值，而是表示类型</p><p>任何字母都可以。</p><pre class="line-numbers language-none"><code class="language-none">interface 接口&lt;T&gt;{}interface 接口&lt;T,V&gt;{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="泛型的实例化"><a href="#泛型的实例化" class="headerlink" title="泛型的实例化"></a>泛型的实例化</h3><p>要在类名后面指定类型参数的值。例如：</p><pre class="line-numbers language-none"><code class="language-none">List&lt;String&gt; strList = new ArrayList&lt;String&gt;();Iterator&lt;Customer&gt; iterator = customers.iterator();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="泛型使用的细节"><a href="#泛型使用的细节" class="headerlink" title="泛型使用的细节"></a>泛型使用的细节</h2><ol><li><p>注意泛型使用的时候是加入引用类型不是数据类型，比如，加入<code>Integer</code>是正确的，加入<code>int</code>就错误。</p></li><li><p>在指定泛型具体类型后，可以传入该类型或者子类类型</p></li><li><p>泛型使用形式</p><pre class="line-numbers language-none"><code class="language-none">List&lt;Integer&gt;list1 = new ArrayList&lt;Integer&gt;();List&lt;Integer&gt;list2 = new ArrayList&lt;&gt;();[说明：]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果我们这样写 <code>List list3 = new ArrayList();</code> 默认给它的泛型是<code>&lt;E&gt; E就是Object</code>。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;泛型的理解和好处&quot;&gt;&lt;a href=&quot;#泛型的理解和好处&quot; class=&quot;headerlink&quot; title=&quot;泛型的理解和好处&quot;&gt;&lt;/a&gt;泛型的理解和好处&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;编译时，检查添加元素的类型，提高了安全性&lt;/li&gt;
&lt;li&gt;减少了类型转换次数，</summary>
      
    
    
    
    <category term="技术 学习 java" scheme="https://dgithubq.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"/>
    
    
    <category term="技术 操作 学习 java泛型" scheme="https://dgithubq.github.io/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>集合的基础体系</title>
    <link href="https://dgithubq.github.io/posts/4.html"/>
    <id>https://dgithubq.github.io/posts/4.html</id>
    <published>2022-03-06T06:54:00.000Z</published>
    <updated>2022-03-07T14:09:54.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集合框架体系图"><a href="#集合框架体系图" class="headerlink" title="集合框架体系图"></a>集合框架体系图</h3><h4 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h4><p><img src="https://s2.loli.net/2022/03/06/J5Cm4nMgj7KLZuE.png"></p><h4 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h4><p><img src="https://s2.loli.net/2022/03/06/E2GxDNSkstVJ86j.png"></p><h3 id="集合的优点"><a href="#集合的优点" class="headerlink" title="集合的优点"></a>集合的优点</h3><ol><li>可以<strong>动态保存</strong>任意的多个对象，使用很方便</li><li>提供了一系列方便的操作对象的方法：add、remove、set、get等等</li><li>使用集合进行添加，删除新元素的示意代码简洁明了</li></ol><h3 id="集合简单的使用"><a href="#集合简单的使用" class="headerlink" title="集合简单的使用"></a>集合简单的使用</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>一次放一个数据所以叫单列集合</p><pre class="line-numbers language-none"><code class="language-none">ArrayList arrayList = new ArrayList();arrayList.add("jake");arrayList.add("tom");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>一次放两个数据所以叫双列集合</p><pre class="line-numbers language-none"><code class="language-none">HashMap hashMap = new HashMap();hashMap.put("NO1","北京");hashMap.put("NO2","上海");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Collection接口和常用方法"><a href="#Collection接口和常用方法" class="headerlink" title="Collection接口和常用方法"></a>Collection接口和常用方法</h3><h4 id="collection接口实现类的特点"><a href="#collection接口实现类的特点" class="headerlink" title="collection接口实现类的特点"></a>collection接口实现类的特点</h4><pre class="line-numbers language-none"><code class="language-none">public interface Collection&lt;E&gt; extends lterable&lt;E&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>collection</code>实现子类可以存放多个元素，每个元素可以是Object</li><li>有些<code>Collection</code>的实现类，可以存放重复的元素，有些不可以</li><li>有些<code>Collection</code>的实现类，有些是有序的(List)，有些不是有序的(Set)</li><li><code>Collection</code>接口没有直接的实现子类，是通过它的子接口<code>Set</code>和<code>List</code>来实现的</li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li><code>add</code>：添加单个元素</li><li><code>remove</code>：删除指定元素</li><li><code>contains</code>：查找元素是否存在</li><li><code>size</code>：获取元素个数</li><li><code>isEmpty</code>：判断是否为空</li><li><code>clear</code>：清空</li><li><code>addAll</code>：添加多个元素</li><li><code>containsAll</code>：查找多个元素是否都存在</li><li><code>removeAll</code>：删除多个元素</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;集合框架体系图&quot;&gt;&lt;a href=&quot;#集合框架体系图&quot; class=&quot;headerlink&quot; title=&quot;集合框架体系图&quot;&gt;&lt;/a&gt;集合框架体系图&lt;/h3&gt;&lt;h4 id=&quot;单列集合&quot;&gt;&lt;a href=&quot;#单列集合&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术 学习 java" scheme="https://dgithubq.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"/>
    
    
    <category term="技术 操作 学习 java集合" scheme="https://dgithubq.github.io/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>如何在GitHub上搭建hexo博客</title>
    <link href="https://dgithubq.github.io/posts/3.html"/>
    <id>https://dgithubq.github.io/posts/3.html</id>
    <published>2022-03-05T10:39:00.000Z</published>
    <updated>2022-03-06T04:02:28.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一篇关于如何搭建 hexo 博客的文章。</p><h2 id="一、大致所需要用到的工具或者网站"><a href="#一、大致所需要用到的工具或者网站" class="headerlink" title="一、大致所需要用到的工具或者网站"></a>一、大致所需要用到的工具或者网站</h2><ol><li>GitHub</li><li>Git Bash</li><li>HEXO</li></ol><h2 id="二、主要步骤"><a href="#二、主要步骤" class="headerlink" title="二、主要步骤"></a>二、主要步骤</h2><ol><li>配置好上述工具</li><li>创建一个 GitHub 仓库</li><li>GitHub 上生成 SSH Keys</li><li>生成本地</li><li>发布到互联网上</li></ol><h2 id="三、具体操作"><a href="#三、具体操作" class="headerlink" title="三、具体操作"></a>三、具体操作</h2><h3 id="1-安装Git-和-HEXO"><a href="#1-安装Git-和-HEXO" class="headerlink" title="1. 安装Git 和 HEXO"></a>1. 安装Git 和 HEXO</h3><p>这个东西直接去官方网站下载就行了。<a href="https://git-scm.com/">Git 官网</a> <a href="https://hexo.io/zh-cn/">HEXO官网</a></p><h3 id="2-创建一个GitHub-仓库"><a href="#2-创建一个GitHub-仓库" class="headerlink" title="2. 创建一个GitHub 仓库"></a>2. 创建一个GitHub 仓库</h3><p>在注册好GitHub账号之后，然后去创建一个新的仓库(点击此处的<code>New</code>)</p><p><img src="https://s2.loli.net/2022/03/05/ufapyQUNXJ7CzIh.png"></p><p>然后此处的<code>Repository name</code>和你的<code>Owne</code>r要一样(比如，我的<code>owner</code>是dgithubq,那么<code>name</code>就填dgithubq.github.io)。页面其他的选项默认即可。</p><p><img src="https://s2.loli.net/2022/03/05/oY1fNxZgEMJ6mwp.png"></p><p>然后<code>Add a README file</code>需要勾选上。</p><p>到此，点击创建之后，那么你的存储库就已经建成功了，你的博客网址就是你刚才的Repository name。</p><h3 id="3-生成一个SSH-Keys"><a href="#3-生成一个SSH-Keys" class="headerlink" title="3. 生成一个SSH Keys"></a>3. 生成一个SSH Keys</h3><p>这个东西很重要，因为后面上传到网络上面去的时候需要它，所以这一步要仔细一点。但是也不会特别的难。</p><p>首先：我们在桌面上进入任何一个文件夹，然后打开下载好的Git Bash，然后我们需要敲打以下的命令来检查ssh是否安装，默认一般是已经安装了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后敲打第二个命令来生成SSH Keys（引号中填自己的邮箱）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"xxx@xxx.xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会在我们的文件夹中建立一个ssh，一般会存放在<code>C:\用户\Administrator\.ssh</code>中。</p><p>找到文件夹之后，打开其中的id_rsa.pub文件，完全复制其中的内容，然后再去打开GitHub。</p><p>在个人设置中找到这个地方：</p><p><img src="https://s2.loli.net/2022/03/05/c1yMPDjgQO5J4wp.png"></p><p>在里面New SSH key，然后会看到以下需要填的内容：</p><p> <img src="https://s2.loli.net/2022/03/05/zGSFwEV7UThADBQ.png"></p><p>Title中随便取，无所谓，key中填入刚才<code>.pub</code>文件里复制的内容，然后在git bash中输入以下命令测试是否绑定成功即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-生成本地博客"><a href="#4-生成本地博客" class="headerlink" title="4. 生成本地博客"></a>4. 生成本地博客</h3><p>去一个自己喜欢的地方建一个文件夹，然后在此文件夹中打开git bash,然后开始敲命令：</p><p>(1) 初始化hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有出现 INFO Start blogging with Hexo！ 就说明有问题，重新执行上面的命令即可，成功之后，刚才的文件夹中会多出很多文件，比如：</p><p><img src="https://s2.loli.net/2022/03/05/owY23BOdip7jq8W.png"></p><p>(2) 静态生成hexo本地页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功后会出现一个Http://xxx的网址，可以去网页中打开，这就是同志们博客的本地生成的页面。</p><h3 id="5-将博客发布到互联网上"><a href="#5-将博客发布到互联网上" class="headerlink" title="5. 将博客发布到互联网上"></a>5. 将博客发布到互联网上</h3><p>(1) 在上一步中生成的文件中，打开_config.yml文件，修改deploy中的东西，一般在最下面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repository: https://github.com/XXX/XXX.github.io.gitbranch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2)在你的博客文件下打开git bash输入以下命令，这是安装hexo-deployer-git自动部署工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传到GitHub仓库(很多人第一次上传，由于GitHub是一个国外的服务器，所以第一次会非常难成功，如果没有弹出输入GitHub账号的弹窗，请多试验几次，总会成功的，博主命不好，试了很多次才成功，总之坚持就是胜利！)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现这个就是成功了：</p><p><img src="https://s2.loli.net/2022/03/05/Kb6NrcswUgy31u5.png"></p><p>这第一个弹窗是输入用户名，下面还有一个弹窗需要注意了！！！</p><p><img src="https://s2.loli.net/2022/03/05/PZ3DCt4bFgI1GzY.png"></p><p>出现这个弹窗之后，要去到GitHub中个人设置里找到Developer setting开发者设置中创建一个令牌，随便取一个名字，权限为了减少麻烦，建议全选，然后把出现的序列号填入第二个弹窗中。(千万不要直接输入GitHub的密码，可能会导致错误，一旦错误，以上步骤又要重来)</p><p>上传成功之后，你的博客就传到互联网上了，你的博客网址就是你的仓库名。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是本人自己创建博客的步骤，个人觉得比较详细，应该不会有太大问题，祝各位好运啦~~~!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;这是一篇关于如何搭建 hexo 博客的文章。&lt;/p&gt;
&lt;h2 id=&quot;一、大致所需要用到的工具或者网站&quot;&gt;&lt;a href=&quot;#一、大致所需要</summary>
      
    
    
    
    <category term="技术 学习" scheme="https://dgithubq.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="技术 操作 想法" scheme="https://dgithubq.github.io/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>博客与博主</title>
    <link href="https://dgithubq.github.io/posts/1.html"/>
    <id>https://dgithubq.github.io/posts/1.html</id>
    <published>2022-03-04T13:00:00.000Z</published>
    <updated>2022-03-06T04:14:59.793Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛!</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识或生活方面有兴趣的事发到博客上供大家观摩</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>一位准备放飞理想的有志青年，常年emo，喜欢dyn</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">林深时见鹿，海蓝时见鲸，梦醒时见你<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>溜了溜了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相遇皆是缘分&lt;/p&gt;
&lt;h3 id=&quot;为什么建博客？&quot;&gt;&lt;a href=&quot;#为什么建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么建博客？&quot;&gt;&lt;/a&gt;为什么建博客？&lt;/h3&gt;&lt;p&gt;肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有</summary>
      
    
    
    
    <category term="生活" scheme="https://dgithubq.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="想法" scheme="https://dgithubq.github.io/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="https://dgithubq.github.io/posts/2.html"/>
    <id>https://dgithubq.github.io/posts/2.html</id>
    <published>2022-03-04T06:00:00.000Z</published>
    <updated>2022-03-06T04:17:09.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code>这段话仅仅用于测试本博客可以上传以及使用！    --dwh</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;这段话仅仅用于测试本博客可以上传以及使用！


    --dwh&lt;/code&gt;&lt;/pre&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="https://dgithubq.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="试验" scheme="https://dgithubq.github.io/tags/%E8%AF%95%E9%AA%8C/"/>
    
  </entry>
  
</feed>
