{"meta":{"title":"芋泥の宝藏屋","subtitle":"dwhの博客","description":"博客因兴趣诞生,在不断完善中","author":"dwh520dyn","url":"https://dwhboke.com","root":"/"},"pages":[{"title":"关于本站","date":"2022-04-19T04:58:56.000Z","updated":"2022-05-17T03:04:50.708Z","comments":false,"path":"about/index.html","permalink":"https://dwhboke.com/about/index.html","excerpt":"","text":"芋泥@宝藏屋“ 认识自我、超越自我 “ 那么你离成功就又进了一步 当你在项目中感觉所要学习的人和事越来越多时，说明你在 成长 。 当你感觉要责怪的人和事越来越少时，说明你在 成熟 。 当你在项目中不断获得了友谊和朋友时，说明你将取得项目的 成功 。 QQ：1329830378 （嘀嘀~，麻烦让一下，我要开车了！） 座右铭：既然选择了远方 便只顾风雨兼程"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-27T12:40:24.587Z","comments":true,"path":"archives/index.html","permalink":"https://dwhboke.com/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2021-07-26T14:44:28.785Z","comments":false,"path":"categories/index.html","permalink":"https://dwhboke.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-07-27T07:31:10.990Z","comments":true,"path":"link/index.html","permalink":"https://dwhboke.com/link/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-10-31T02:11:28.000Z","updated":"2021-11-23T10:50:01.880Z","comments":false,"path":"comments/index.html","permalink":"https://dwhboke.com/comments/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2021-07-26T13:06:52.537Z","comments":true,"path":"music/index.html","permalink":"https://dwhboke.com/music/index.html","excerpt":"","text":""},{"title":"","date":"2022-03-02T11:47:07.601Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/README.html","permalink":"https://dwhboke.com/live2d-widget-master/README.html","excerpt":"","text":"Live2D Widget特性 Feature在网页中添加Live2D看板娘。兼容PJAX，支持无刷新加载。Add Live2D widget to web page. Compatible with PJAX. 警告：不支持IE。WARNING: DO NOT SUPPORT IE. 示例 Demo在米米的博客的左下角可查看效果。需要使用支持WebGL的现代浏览器浏览。 这个仓库中也提供了两个Demo，即 demo1.html ，展现基础效果 demo2.html ，仿NPM的登陆界面 依赖 Dependencies本插件需要jQuery和font-awesome支持，请确保它们已在页面中加载，例如在&lt;head&gt;中加入：jQuery and font-awesome is required for this plugin. You can add this to &lt;head&gt;: &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt; &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css\"&gt; 否则无法正常显示。（如果你的网页已经加载了jQuery，就不要重复加载了） 使用 Usage你可以直接这样使用： &lt;script src=\"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js\"&gt;&lt;/script&gt; 将这一行代码加入&lt;head&gt;或&lt;body&gt;，即可看到效果。如果你的网站启用了PJAX，由于看板娘不必每页刷新，因此需要注意将相关脚本放到PJAX刷新区域之外。 换句话说，如果你是小白，或者只需要最基础的功能，就只需要： 把这一行代码，连同前面的两行代码，一起放到html的&lt;head&gt;中即可； 如果页面是用各种模版引擎、php、asp生成的，也要自行修改，方法类似，只是可能略为麻烦。 但是！我们强烈推荐自己进行配置，否则很多功能是不完整的，并且可能产生问题！如果你有兴趣自己折腾的话，请看下面的详细说明。 Using CDN如果要自定义有关内容，可以把这个仓库Fork一份，然后进行修改。这时，使用方法对应地变为 &lt;script src=\"https://cdn.jsdelivr.net/gh/username/live2d-widget/autoload.js\"&gt;&lt;/script&gt; 将username替换为你的GitHub用户名即可。 Self-host你也可以直接把这些文件放到服务器上，而不是通过CDN加载。 如果你可以通过ssh访问你的主机，请把整个项目克隆到服务器上。执行：cd /path/to/your/webroot # Clone this repository git clone https://github.com/stevenjoezhang/live2d-widget.git 如果你的主机无法用ssh连接（例如一般的虚拟主机），请选择Download ZIP，然后通过ftp上传到主机上，再解压到网站的目录下。 如果你是通过Hexo等工具部署的静态博客，请选择Download ZIP，然后解压到本地的博客目录下，例如source下与_posts同级的目录。重新部署博客时，相关文件就会自动上传到对应的目录。（还需要在Hexo主题相关的ejs或njk模版中正确配置路径，才可以加载） 这样，整个项目就可以通过你的服务器IP或者域名从公网访问了。你可以试试能否正常地通过浏览器打开autoload.js和live2d.min.js等文件。如果没有问题，接下来需要修改一些配置。（需要通过服务器上的文本编辑器修改；你也可以先在本地完成这一步骤，再上传到服务器上）修改autoload.js中的参数live2d_path为live2d-widget这一文件夹在公网上的路径。比如说，如果你可以通过 https://www.example.com/path/to/live2d-widget/live2d.min.js 访问到live2d.min.js，那么就把live2d_path的值修改为 https://www.example.com/path/to/live2d-widget/ 路径末尾的/一定要加上。具体可以参考autoload.js内的注释。完成后，在你要添加看板娘的界面加入 &lt;script src=\"https://www.example.com/path/to/live2d-widget/autoload.js\"&gt;&lt;/script&gt; 就可以加载了。 目录结构 Files waifu-tips.json中包含了触发条件（selector，选择器）和触发时显示的文字（text）； waifu.css是看板娘的样式表。 源文件是对Hexo的NexT主题有效的，为了适用于你自己的网页，可能需要自行修改，或增加新内容。警告：作者不对包括但不限于waifu-tips.json和waifu-tips.js文件中的内容负责，请自行确保它们是合适的。 如果有任何疑问，欢迎提Issue。如果有任何修改建议，欢迎提PR。 鸣谢 Credits代码自这篇博文魔改而来：https://www.fghrsh.net/post/123.html相比初始的版本，这个仓库增加了一些功能，并优化了提示展现机制。 更多内容可以参考：https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02https://github.com/xiazeyu/live2d-widget.jshttps://github.com/summerscar/live2dDemo 还可以自行搭建后端api，并增加模型（需要修改的内容比较多，此处不再赘述）：https://github.com/fghrsh/live2d_apihttps://github.com/xiazeyu/live2d-widget-modelshttps://github.com/xiaoski/live2d_models_collection 除此之外，还有桌面版本：https://github.com/amorist/platelethttps://github.com/akiroz/Live2D-Widget 点击看板娘的纸飞机按钮时，会出现一个彩蛋，这来自于WebsiteAsteroids。 更多 MoreLive2D官方网站：https://www.live2d.com/en/https://live2d.github.io 可以在官方网站下载、打包SDK，以获取更多的功能。具体操作是： 点击Cubism SDK for Web，下载相关文件； 解压并进入目录，执行npm install； 执行npm run build-sample。 许可证 LicenseReleased under the GNU General Public License v3http://www.gnu.org/licenses/gpl-3.0.html 更新 Update2018年10月31日，由fghrsh提供的原API停用，请更新至新地址。参考文章：https://www.fghrsh.net/post/170.html"},{"title":"","date":"2022-03-02T11:47:07.604Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/autoload.js","permalink":"https://dwhboke.com/live2d-widget-master/autoload.js","excerpt":"","text":"//注意：live2d_path参数应使用绝对路径 const live2d_path = \"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/\"; //const live2d_path = \"/live2d-widget/\"; //封装异步加载资源的方法 function loadExternalResource(url, type) { return new Promise((resolve, reject) =&gt; { let tag; if (type === \"css\") { tag = document.createElement(\"link\"); tag.rel = \"stylesheet\"; tag.href = url; } else if (type === \"js\") { tag = document.createElement(\"script\"); tag.src = url; } if (tag) { tag.onload = () =&gt; resolve(url); tag.onerror = () =&gt; reject(url); document.head.appendChild(tag); } }); } //加载waifu.css live2d.min.js waifu-tips.js Promise.all([ loadExternalResource(live2d_path + \"waifu.css\", \"css\"), loadExternalResource(live2d_path + \"live2d.min.js\", \"js\"), loadExternalResource(live2d_path + \"waifu-tips.js\", \"js\") ]).then(() =&gt; { initWidget(live2d_path + \"waifu-tips.json\", \"https://live2d.fghrsh.net/api\"); }); //initWidget第一个参数为waifu-tips.json的路径，第二个参数为api地址 //api后端可自行搭建，参考https://github.com/fghrsh/live2d_api //初始化看板娘会自动加载指定目录下的waifu-tips.json console.log(` く__,.ヘヽ. / ,ー､ 〉 ＼ ', !-─‐-i / /´ ／｀ｰ' L/／｀ヽ､ / ／, /| , , ', ｲ / /-‐/ ｉ L_ ﾊ ヽ! i ﾚ ﾍ 7ｲ｀ﾄ ﾚ'ｧ-ﾄ､!ハ| | !,/7 '0' ´0iソ| | |.从\" _ ,,,, / |./ | ﾚ'| i＞.､,,__ _,.イ / .i | ﾚ'| | / k_７_/ﾚ'ヽ, ﾊ. | | |/i 〈|/ i ,.ﾍ | i | .|/ / ｉ： ﾍ! ＼ | kヽ&gt;､ﾊ _,.ﾍ､ /､! !'〈//｀Ｔ´', ＼ ｀'7'ｰr' ﾚ'ヽL__|___i,___,ンﾚ|ノ ﾄ-,/ |___./ 'ｰ' !_,.: `);"},{"title":"","date":"2022-03-02T11:47:07.608Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/waifu-tips.json","permalink":"https://dwhboke.com/live2d-widget-master/waifu-tips.json","excerpt":"","text":"{\"mouseover\":[{\"selector\":\"#waifu #live2d\",\"text\":[\"干嘛呢你，快把手拿开～～\",\"鼠…鼠标放错地方了！\",\"你要干嘛呀？\",\"喵喵喵？\",\"怕怕(ノ≧∇≦)ノ\",\"非礼呀！救命！\",\"这样的话，只能使用武力了！\",\"我要生气了哦\",\"不要动手动脚的！\",\"真…真的是不知羞耻！\",\"Hentai！\"]},{\"selector\":\"#waifu-tool .fa-comment\",\"text\":[\"猜猜我要说些什么？\",\"我从青蛙王子那里听到了不少人生经验。\"]},{\"selector\":\"#waifu-tool .fa-paper-plane\",\"text\":[\"要不要来玩飞机大战？\",\"这个按钮上写着“不要点击”。\",\"怎么，你想来和我玩个游戏？\",\"听说这样可以蹦迪！\"]},{\"selector\":\"#waifu-tool .fa-user-circle\",\"text\":[\"你是不是不爱人家了呀，呜呜呜～\",\"要见见我的姐姐嘛？\",\"想要看我妹妹嘛？\",\"要切换看板娘吗？\"]},{\"selector\":\"#waifu-tool .fa-street-view\",\"text\":[\"喜欢换装 PLAY 吗？\",\"这次要扮演什么呢？\",\"变装！\",\"让我们看看接下来会发生什么！\"]},{\"selector\":\"#waifu-tool .fa-camera-retro\",\"text\":[\"你要给我拍照呀？一二三～茄子～\",\"要不，我们来合影吧！\",\"保持微笑就好了～\"]},{\"selector\":\"#waifu-tool .fa-info-circle\",\"text\":[\"想要知道更多关于我的事么？\",\"这里记录着我搬家的历史呢。\",\"你想深入了解我什么呢？\"]},{\"selector\":\"#waifu-tool .fa-times\",\"text\":[\"到了要说再见的时候了吗？\",\"呜呜 QAQ 后会有期……\",\"不要抛弃我呀……\",\"我们，还能再见面吗……\",\"哼，你会后悔的！\"]},{\"selector\":\".menu-item-home\",\"text\":[\"点击前往首页，想回到上一页可以使用浏览器的后退功能哦。\",\"点它就可以回到首页啦！\",\"回首页看看吧。\"]},{\"selector\":\".menu-item-about\",\"text\":[\"你想知道我家主人是谁吗？\",\"这里有一些关于我家主人的秘密哦，要不要看看呢？\",\"发现主人出没地点！\"]},{\"selector\":\".menu-item-tags\",\"text\":[\"点击就可以看文章的标签啦！\",\"点击来查看所有标签哦。\",\"快看看这里都有什么呢！\"]},{\"selector\":\".menu-item-categories\",\"text\":[\"文章都分类好啦～\",\"点击来查看文章分类哦。\",\"快看看这里都有什么呢！\"]},{\"selector\":\".menu-item-archives\",\"text\":[\"翻页比较麻烦吗，那就来看看文章归档吧。\",\"文章目录都整理在这里啦！\",\"快看看这里都有什么呢？\"]},{\"selector\":\".menu-item-friends\",\"text\":[\"这是我的朋友们哦ヾ(◍°∇°◍)ﾉﾞ\",\"要去大佬们的家看看吗？\",\"要去拜访一下我的朋友们吗？\"]},{\"selector\":\".menu-item-search\",\"text\":[\"找不到想看的内容？搜索看看吧！\",\"在找什么东西呢，需要帮忙吗？\"]},{\"selector\":\".site-author\",\"text\":[\"我家主人好看吗？\",\"这是我家主人(*´∇｀*)\"]},{\"selector\":\".site-state\",\"text\":[\"这是文章的统计信息～\",\"要不要点进去看看？\"]},{\"selector\":\".feed-link a\",\"text\":[\"这里可以使用 RSS 订阅呢！\",\"利用 feed 订阅器，就能快速知道博客有没有更新了呢。\"]},{\"selector\":\".cc-opacity, .post-copyright-author\",\"text\":[\"要记得规范转载哦。\",\"所有文章均采用 CC BY-NC-SA 4.0 许可协议～\",\"转载前要先注意下文章的版权协议呢。\"]},{\"selector\":\".links-of-author\",\"text\":[\"这里是主人的常驻地址哦。\",\"这里有主人的联系方式！\"]},{\"selector\":\"#qrcode\",\"text\":[\"手机扫一下就能继续看，很方便呢～\",\"扫一扫，打开新世界的大门！\"]},{\"selector\":\".fancybox img, img.medium-zoom-image\",\"text\":[\"点击图片可以放大呢！\"]},{\"selector\":\".highlight-wrap, .gist\",\"text\":[\"代码可以直接点击复制哟。\",\"GitHub！我是新手！\",\"PHP 是最好的语言！\"]},{\"selector\":\".container a[href^='http'], .nav-link .nav-text\",\"text\":[\"要去看看 {text} 么？\",\"去 {text} 逛逛吧。\",\"到 {text} 看看吧。\"]},{\"selector\":\"a[href^='mailto']\",\"text\":[\"邮件我会及时回复的！\",\"点击就可以发送邮件啦～\"]},{\"selector\":\"a[href^='/tags/']\",\"text\":[\"要去看看 {text} 标签么？\",\"点它可以查看此标签下的所有文章哟！\"]},{\"selector\":\"a[href^='/categories/']\",\"text\":[\"要去看看 {text} 分类么？\",\"点它可以查看此分类下的所有文章哟！\"]},{\"selector\":\".post-title-link\",\"text\":[\"要看看 {text} 这篇文章吗？\"]},{\"selector\":\"a[rel='contents']\",\"text\":[\"点击来阅读全文哦。\"]},{\"selector\":\"a[itemprop='discussionUrl']\",\"text\":[\"要去看看评论吗？\"]},{\"selector\":\".back-to-top\",\"text\":[\"点它就可以回到顶部啦！\",\"又回到最初的起点～\",\"要回到开始的地方么？\"]},{\"selector\":\"#rewardButton\",\"text\":[\"我是不是棒棒哒～快给我点赞吧！\",\"要打赏我嘛？好期待啊～\",\"主人最近在吃土呢，很辛苦的样子，给他一些钱钱吧～\"]},{\"selector\":\"#wechat\",\"text\":[\"这是我的微信二维码～\"]},{\"selector\":\"#alipay\",\"text\":[\"这是我的支付宝哦！\"]},{\"selector\":\"#bitcoin\",\"text\":[\"这是我的比特币账号！\"]},{\"selector\":\"#needsharebutton-postbottom .btn\",\"text\":[\"好东西要让更多人知道才行哦。\",\"觉得文章有帮助的话，可以分享给更多需要的朋友呢。\"]},{\"selector\":\".need-share-button_weibo\",\"text\":[\"微博？来分享一波喵！\"]},{\"selector\":\".need-share-button_wechat\",\"text\":[\"分享到微信吧！\"]},{\"selector\":\".need-share-button_douban\",\"text\":[\"分享到豆瓣好像也不错！\"]},{\"selector\":\".need-share-button_qqzone\",\"text\":[\"QQ空间，一键转发，耶～\"]},{\"selector\":\".need-share-button_twitter\",\"text\":[\"Twitter？好像是不存在的东西？\"]},{\"selector\":\".need-share-button_facebook\",\"text\":[\"emmm…FB好像也是不存在的东西？\"]},{\"selector\":\".post-nav-next\",\"text\":[\"来看看下一篇文章吧。\",\"点它可以看下一篇文章哦！\",\"要翻到下一篇文章吗？\"]},{\"selector\":\".post-nav-prev\",\"text\":[\"来看看上一篇文章吧。\",\"点它可以看上一篇文章哦！\",\"要翻到上一篇文章吗？\"]},{\"selector\":\".extend.next\",\"text\":[\"去下一页看看吧。\",\"点它可以前进哦！\",\"要翻到下一页吗？\"]},{\"selector\":\".extend.prev\",\"text\":[\"去上一页看看吧。\",\"点它可以后退哦！\",\"要翻到上一页吗？\"]},{\"selector\":\"input.vnick\",\"text\":[\"该怎么称呼你呢？\",\"留下你的尊姓大名！\"]},{\"selector\":\".vmail\",\"text\":[\"留下你的邮箱，不然就是无头像人士了！\",\"记得设置好 Gravatar 头像哦！\",\"为了方便通知你最新消息，一定要留下邮箱！\"]},{\"selector\":\".vlink\",\"text\":[\"快快告诉我你的家在哪里，好让我去参观参观！\"]},{\"selector\":\".veditor\",\"text\":[\"想要去评论些什么吗？\",\"要说点什么吗？\",\"觉得博客不错？快来留言和主人交流吧！\"]},{\"selector\":\".vcontrol a\",\"text\":[\"你会不会熟练使用Markdown呀？\",\"使用Markdown让评论更美观吧～\"]},{\"selector\":\".vemoji-btn\",\"text\":[\"要插入一个萌萌哒的表情吗？\",\"要来一发表情吗？\"]},{\"selector\":\".vpreview-btn\",\"text\":[\"要预览一下你的发言吗？\",\"快看看你的评论有多少负熵！\"]},{\"selector\":\".vsubmit\",\"text\":[\"评论没有审核，要对自己的发言负责哦～\",\"要提交了吗，请耐心等待回复哦～\"]},{\"selector\":\".vcontent\",\"text\":[\"哇，快看看这个精彩评论！\",\"如果有疑问，请尽快留言哦～\"]}],\"click\":[{\"selector\":\"#waifu #live2d\",\"text\":[\"是…是不小心碰到了吧…\",\"萝莉控是什么呀？\",\"你看到我的小熊了吗？\",\"再摸的话我可要报警了！⌇●﹏●⌇\",\"110吗，这里有个变态一直在摸我(ó﹏ò｡)\",\"不要摸我了，我会告诉老婆来打你的！\",\"干嘛动我呀！小心我咬你！\",\"别摸我，有什么好摸的！\"]},{\"selector\":\".veditor\",\"text\":[\"要吐槽些什么呢？\",\"一定要认真填写喵～\",\"有什么想说的吗？\"]},{\"selector\":\".vsubmit\",\"text\":[\"输入验证码就可以提交评论啦～\"]}],\"seasons\":[{\"date\":\"01/01\",\"text\":\"元旦了呢，新的一年又开始了，今年是{year}年～\"},{\"date\":\"02/14\",\"text\":\"又是一年情人节，{year}年找到对象了嘛～\"},{\"date\":\"03/08\",\"text\":\"今天是国际妇女节！\"},{\"date\":\"03/12\",\"text\":\"今天是植树节，要保护环境呀！\"},{\"date\":\"04/01\",\"text\":\"悄悄告诉你一个秘密～今天是愚人节，不要被骗了哦～\"},{\"date\":\"05/01\",\"text\":\"今天是五一劳动节，计划好假期去哪里了吗～\"},{\"date\":\"06/01\",\"text\":\"儿童节了呢，快活的时光总是短暂，要是永远长不大该多好啊…\"},{\"date\":\"09/03\",\"text\":\"中国人民抗日战争胜利纪念日，铭记历史、缅怀先烈、珍爱和平、开创未来。\"},{\"date\":\"09/10\",\"text\":\"教师节，在学校要给老师问声好呀～\"},{\"date\":\"10/01\",\"text\":\"国庆节到了，为祖国母亲庆生！\"},{\"date\":\"11/05-11/12\",\"text\":\"今年的双十一是和谁一起过的呢～\"},{\"date\":\"12/20-12/31\",\"text\":\"这几天是圣诞节，主人肯定又去剁手买买买了～\"}]}"},{"title":"","date":"2022-03-02T11:47:07.608Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/waifu.css","permalink":"https://dwhboke.com/live2d-widget-master/waifu.css","excerpt":"","text":"#waifu-toggle { background-color: #fa0; border-radius: 5px; bottom: 66px; color: #fff; cursor: pointer; font-size: 12px; left: 0; padding: 5px 2px 5px 5px; position: fixed; width: 60px; writing-mode: vertical-rl; } #waifu { bottom: -1000px; left: 0; line-height: 0; position: fixed; transform: translateY(3px); transition: transform .3s ease-in-out; z-index: 1; } #waifu:hover { transform: translateY(0); } @media (max-width: 768px) { #waifu { display: none; } } #waifu-tips { animation: shake 50s ease-in-out 5s infinite; background-color: rgba(236, 217, 188, .5); border: 1px solid rgba(224, 186, 140, .62); border-radius: 12px; box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2); font-size: 14px; line-height: 24px; margin: -30px 20px; min-height: 70px; opacity: 0; overflow: hidden; padding: 5px 10px; position: absolute; text-overflow: ellipsis; width: 250px; word-break: break-all; } #waifu #live2d { cursor: grab; cursor: -webkit-grab; cursor: -o-grab; cursor: -ms-grab; position: relative; } #waifu #live2d:active { cursor: grabbing; cursor: -webkit-grabbing; cursor: -o-grabbing; cursor: -ms-grabbing; } #waifu-tool { color: #aaa; opacity: 0; position: absolute; right: -10px; top: 70px; transition: opacity 1s; } #waifu:hover #waifu-tool { opacity: 1; } #waifu-tool span { color: #5b6c7d; cursor: pointer; display: block; line-height: 30px; text-align: center; transition: color .3s; } #waifu-tool span:hover { color: #0684bd; /* #34495e */ } @keyframes shake { 2% { transform: translate(.5px, -1.5px) rotate(-.5deg); } 4% { transform: translate(.5px, 1.5px) rotate(1.5deg); } 6% { transform: translate(1.5px, 1.5px) rotate(1.5deg); } 8% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 10% { transform: translate(.5px, 2.5px) rotate(.5deg); } 12% { transform: translate(1.5px, 1.5px) rotate(.5deg); } 14% { transform: translate(.5px, .5px) rotate(.5deg); } 16% { transform: translate(-1.5px, -.5px) rotate(1.5deg); } 18% { transform: translate(.5px, .5px) rotate(1.5deg); } 20% { transform: translate(2.5px, 2.5px) rotate(1.5deg); } 22% { transform: translate(.5px, -1.5px) rotate(1.5deg); } 24% { transform: translate(-1.5px, 1.5px) rotate(-.5deg); } 26% { transform: translate(1.5px, .5px) rotate(1.5deg); } 28% { transform: translate(-.5px, -.5px) rotate(-.5deg); } 30% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 32% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 34% { transform: translate(2.5px, 2.5px) rotate(-.5deg); } 36% { transform: translate(.5px, -1.5px) rotate(.5deg); } 38% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 40% { transform: translate(-.5px, 2.5px) rotate(.5deg); } 42% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 44% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 46% { transform: translate(1.5px, -.5px) rotate(-.5deg); } 48% { transform: translate(2.5px, -.5px) rotate(.5deg); } 50% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 52% { transform: translate(-.5px, 1.5px) rotate(.5deg); } 54% { transform: translate(-1.5px, 1.5px) rotate(.5deg); } 56% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 58% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 60% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 62% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 64% { transform: translate(-1.5px, 1.5px) rotate(1.5deg); } 66% { transform: translate(.5px, 2.5px) rotate(1.5deg); } 68% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 70% { transform: translate(2.5px, 2.5px) rotate(.5deg); } 72% { transform: translate(-.5px, -1.5px) rotate(1.5deg); } 74% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 76% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 78% { transform: translate(-1.5px, 2.5px) rotate(.5deg); } 80% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 82% { transform: translate(-1.5px, .5px) rotate(-.5deg); } 84% { transform: translate(-.5px, .5px) rotate(1.5deg); } 86% { transform: translate(2.5px, 1.5px) rotate(.5deg); } 88% { transform: translate(-1.5px, .5px) rotate(1.5deg); } 90% { transform: translate(-1.5px, -.5px) rotate(-.5deg); } 92% { transform: translate(-1.5px, -1.5px) rotate(1.5deg); } 94% { transform: translate(.5px, .5px) rotate(-.5deg); } 96% { transform: translate(2.5px, -.5px) rotate(-.5deg); } 98% { transform: translate(-1.5px, -1.5px) rotate(-.5deg); } 0%, 100% { transform: translate(0, 0) rotate(0); } }"},{"title":"","date":"2022-03-02T11:47:07.607Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/waifu-tips.js","permalink":"https://dwhboke.com/live2d-widget-master/waifu-tips.js","excerpt":"","text":"/* * https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02 * https://www.fghrsh.net/post/123.html */ function loadWidget(waifuPath, apiPath) { localStorage.removeItem(\"waifu-display\"); sessionStorage.removeItem(\"waifu-text\"); document.body.insertAdjacentHTML('beforeend', ` `); $(\"#waifu\").show().animate({ bottom: 0 }, 3000); function registerEventListener() { document.querySelector(\"#waifu-tool .fa-comment\").addEventListener(\"click\", showHitokoto); document.querySelector(\"#waifu-tool .fa-paper-plane\").addEventListener(\"click\", () =&gt; { if (window.Asteroids) { if (!window.ASTEROIDSPLAYERS) window.ASTEROIDSPLAYERS = []; window.ASTEROIDSPLAYERS.push(new Asteroids()); } else { $.ajax({ url: \"https://cdn.jsdelivr.net/gh/GalaxyMimi/CDN/asteroids.js\", dataType: \"script\", cache: true }); } }); document.querySelector(\"#waifu-tool .fa-user-circle\").addEventListener(\"click\", loadOtherModel); document.querySelector(\"#waifu-tool .fa-street-view\").addEventListener(\"click\", loadRandModel); document.querySelector(\"#waifu-tool .fa-camera-retro\").addEventListener(\"click\", () =&gt; { showMessage(\"照好了嘛，是不是很可爱呢？\", 6000, 9); Live2D.captureName = \"photo.png\"; Live2D.captureFrame = true; }); document.querySelector(\"#waifu-tool .fa-info-circle\").addEventListener(\"click\", () =&gt; { open(\"https://github.com/stevenjoezhang/live2d-widget\"); }); document.querySelector(\"#waifu-tool .fa-times\").addEventListener(\"click\", () =&gt; { localStorage.setItem(\"waifu-display\", Date.now()); showMessage(\"愿你有一天能与重要的人重逢。\", 2000, 11); $(\"#waifu\").animate({ bottom: -500 }, 3000, () =&gt; { $(\"#waifu\").hide(); $(\"#waifu-toggle\").show().animate({ \"margin-left\": -50 }, 1000); }); }); var re = /x/; console.log(re); re.toString = () =&gt; { showMessage(\"哈哈，你打开了控制台，是想要看看我的小秘密吗？\", 6000, 9); return \"\"; }; window.addEventListener(\"copy\", () =&gt; { showMessage(\"你都复制了些什么呀，转载要记得加上出处哦！\", 6000, 9); }); window.addEventListener(\"visibilitychange\", () =&gt; { if (!document.hidden) showMessage(\"哇，你终于回来了～\", 6000, 9); }); } registerEventListener(); function welcomeMessage() { var SiteIndexUrl = `${location.protocol}//${location.host}/`, text; //自动获取主页 if (location.href == SiteIndexUrl) { //如果是主页 var now = new Date().getHours(); if (now &gt; 5 &amp;&amp; now &lt;= 7) text = \"早上好！一日之计在于晨，美好的一天就要开始了。\"; else if (now &gt; 7 &amp;&amp; now &lt;= 11) text = \"上午好！工作顺利嘛，不要久坐，多起来走动走动哦！\"; else if (now &gt; 11 &amp;&amp; now &lt;= 14) text = \"中午了，工作了一个上午，现在是午餐时间！\"; else if (now &gt; 14 &amp;&amp; now &lt;= 17) text = \"午后很容易犯困呢，今天的运动目标完成了吗？\"; else if (now &gt; 17 &amp;&amp; now &lt;= 19) text = \"傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红～\"; else if (now &gt; 19 &amp;&amp; now &lt;= 21) text = \"晚上好，今天过得怎么样？\"; else if (now &gt; 21 &amp;&amp; now &lt;= 23) text = [\"已经这么晚了呀，早点休息吧，晚安～\", \"深夜时要爱护眼睛呀！\"]; else text = \"你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？\"; } else if (document.referrer !== \"\") { var referrer = document.createElement(\"a\"); referrer.href = document.referrer; var domain = referrer.hostname.split(\".\")[1]; if (location.hostname == referrer.hostname) text = `欢迎阅读『${document.title.split(\" - \")[0]}』`; else if (domain == \"baidu\") text = `Hello！来自 百度搜索 的朋友你是搜索 ${referrer.search.split(\"&amp;wd=\")[1].split(\"&amp;\")[0]} 找到的我吗？`; else if (domain == \"so\") text = `Hello！来自 360搜索 的朋友你是搜索 ${referrer.search.split(\"&amp;q=\")[1].split(\"&amp;\")[0]} 找到的我吗？`; else if (domain == \"google\") text = `Hello！来自 谷歌搜索 的朋友欢迎阅读『${document.title.split(\" - \")[0]}』`; else text = `Hello！来自 ${referrer.hostname} 的朋友`; } else { text = `欢迎阅读『${document.title.split(\" - \")[0]}』`; } showMessage(text, 7000, 8); } welcomeMessage(); //检测用户活动状态，并在空闲时定时显示一言 var userAction = false, hitokotoTimer = null, messageTimer = null, messageArray = [\"好久不见，日子过得好快呢……\", \"大坏蛋！你都多久没理人家了呀，嘤嘤嘤～\", \"嗨～快来逗我玩吧！\", \"拿小拳拳锤你胸口！\"]; if ($(\".fa-share-alt\").is(\":hidden\")) messageArray.push(\"记得把小家加入 Adblock 白名单哦！\"); $(document).mousemove(() =&gt; { userAction = true; }).keydown(() =&gt; { userAction = true; }); setInterval(() =&gt; { if (!userAction) { if (!hitokotoTimer) hitokotoTimer = setInterval(showHitokoto, 25000); } else { userAction = false; clearInterval(hitokotoTimer); hitokotoTimer = null; } }, 1000); function showHitokoto() { //增加 hitokoto.cn 的 API if (Math.random() &lt; 0.6 &amp;&amp; messageArray.length &gt; 0) showMessage(messageArray[Math.floor(Math.random() * messageArray.length)], 6000, 9); else fetch(\"https://v1.hitokoto.cn\") .then(response =&gt; response.json()) .then(result =&gt; { var text = `这句一言来自 『${result.from}』，是 ${result.creator} 在 hitokoto.cn 投稿的。`; showMessage(result.hitokoto, 6000, 9); setTimeout(() =&gt; { showMessage(text, 4000, 9); }, 6000); }); } function showMessage(text, timeout, priority) { if (!text) return; if (!sessionStorage.getItem(\"waifu-text\") || sessionStorage.getItem(\"waifu-text\") &lt;= priority) { if (messageTimer) { clearTimeout(messageTimer); messageTimer = null; } if (Array.isArray(text)) text = text[Math.floor(Math.random() * text.length)]; sessionStorage.setItem(\"waifu-text\", priority); $(\"#waifu-tips\").stop().html(text).fadeTo(200, 1); messageTimer = setTimeout(() =&gt; { sessionStorage.removeItem(\"waifu-text\"); $(\"#waifu-tips\").fadeTo(1000, 0); }, timeout); } } function initModel() { var modelId = localStorage.getItem(\"modelId\"), modelTexturesId = localStorage.getItem(\"modelTexturesId\"); if (modelId == null) { //首次访问加载 指定模型 的 指定材质 var modelId = 1, //模型 ID modelTexturesId = 53; //材质 ID } loadModel(modelId, modelTexturesId); fetch(waifuPath) .then(response =&gt; response.json()) .then(result =&gt; { result.mouseover.forEach(tips =&gt; { window.addEventListener(\"mouseover\", event =&gt; { if (!event.target.matches(tips.selector)) return; var text = Array.isArray(tips.text) ? tips.text[Math.floor(Math.random() * tips.text.length)] : tips.text; text = text.replace(\"{text}\", event.target.innerText); showMessage(text, 4000, 8); }); }); result.click.forEach(tips =&gt; { window.addEventListener(\"click\", event =&gt; { if (!event.target.matches(tips.selector)) return; var text = Array.isArray(tips.text) ? tips.text[Math.floor(Math.random() * tips.text.length)] : tips.text; text = text.replace(\"{text}\", event.target.innerText); showMessage(text, 4000, 8); }); }); result.seasons.forEach(tips =&gt; { var now = new Date(), after = tips.date.split(\"-\")[0], before = tips.date.split(\"-\")[1] || after; if ((after.split(\"/\")[0] &lt;= now.getMonth() + 1 &amp;&amp; now.getMonth() + 1 &lt;= before.split(\"/\")[0]) &amp;&amp; (after.split(\"/\")[1] &lt;= now.getDate() &amp;&amp; now.getDate() &lt;= before.split(\"/\")[1])) { var text = Array.isArray(tips.text) ? tips.text[Math.floor(Math.random() * tips.text.length)] : tips.text; text = text.replace(\"{year}\", now.getFullYear()); //showMessage(text, 7000, true); messageArray.push(text); } }); }); } initModel(); function loadModel(modelId, modelTexturesId) { localStorage.setItem(\"modelId\", modelId); if (modelTexturesId === undefined) modelTexturesId = 0; localStorage.setItem(\"modelTexturesId\", modelTexturesId); loadlive2d(\"live2d\", `${apiPath}/get/?id=${modelId}-${modelTexturesId}`, console.log(`Live2D 模型 ${modelId}-${modelTexturesId} 加载完成`)); } function loadRandModel() { var modelId = localStorage.getItem(\"modelId\"), modelTexturesId = localStorage.getItem(\"modelTexturesId\"); //可选 \"rand\"(随机), \"switch\"(顺序) fetch(`${apiPath}/rand_textures/?id=${modelId}-${modelTexturesId}`) .then(response =&gt; response.json()) .then(result =&gt; { if (result.textures[\"id\"] == 1 &amp;&amp; (modelTexturesId == 1 || modelTexturesId == 0)) showMessage(\"我还没有其他衣服呢！\", 4000, 10); else showMessage(\"我的新衣服好看嘛？\", 4000, 10); loadModel(modelId, result.textures[\"id\"]); }); } function loadOtherModel() { var modelId = localStorage.getItem(\"modelId\"); fetch(`${apiPath}/switch/?id=${modelId}`) .then(response =&gt; response.json()) .then(result =&gt; { loadModel(result.model[\"id\"]); showMessage(result.model[\"message\"], 4000, 10); }); } } function initWidget(waifuPath = \"/waifu-tips.json\", apiPath = \"\") { if (screen.width &lt;= 768) return; document.body.insertAdjacentHTML('beforeend', ` 看板娘 `); $(\"#waifu-toggle\").hover(() =&gt; { $(\"#waifu-toggle\").animate({ \"margin-left\": -30 }, 500); }, () =&gt; { $(\"#waifu-toggle\").animate({ \"margin-left\": -50 }, 500); }).click(() =&gt; { $(\"#waifu-toggle\").animate({ \"margin-left\": -100 }, 1000, () =&gt; { $(\"#waifu-toggle\").hide(); }); if ($(\"#waifu-toggle\").attr(\"first-time\")) { loadWidget(waifuPath, apiPath); $(\"#waifu-toggle\").attr(\"first-time\", false); } else { localStorage.removeItem(\"waifu-display\"); $(\"#waifu\").show().animate({ bottom: 0 }, 3000); } }); if (localStorage.getItem(\"waifu-display\") &amp;&amp; Date.now() - localStorage.getItem(\"waifu-display\") &lt;= 86400000) { $(\"#waifu-toggle\").attr(\"first-time\", true).css({ \"margin-left\": -50 }); } else { loadWidget(waifuPath, apiPath); } }"},{"title":"","date":"2022-03-02T11:47:07.607Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/live2d.min.js","permalink":"https://dwhboke.com/live2d-widget-master/live2d.min.js","excerpt":"","text":"!function(t){function i(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}var e={};i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},i.n=function(t){var e=t&amp;&amp;t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p=\"\",i(i.s=4)}([function(t,i,e){\"use strict\";function r(){this.live2DModel=null,this.modelMatrix=null,this.eyeBlink=null,this.physics=null,this.pose=null,this.debugMode=!1,this.initialized=!1,this.updating=!1,this.alpha=1,this.accAlpha=0,this.lipSync=!1,this.lipSyncValue=0,this.accelX=0,this.accelY=0,this.accelZ=0,this.dragX=0,this.dragY=0,this.startTimeMSec=null,this.mainMotionManager=new h,this.expressionManager=new h,this.motions={},this.expressions={},this.isTexLoaded=!1}function o(){AMotion.prototype.constructor.call(this),this.paramList=new Array}function n(){this.id=\"\",this.type=-1,this.value=null}function s(){this.nextBlinkTime=null,this.stateStartTime=null,this.blinkIntervalMsec=null,this.eyeState=g.STATE_FIRST,this.blinkIntervalMsec=4e3,this.closingMotionMsec=100,this.closedMotionMsec=50,this.openingMotionMsec=150,this.closeIfZero=!0,this.eyeID_L=\"PARAM_EYE_L_OPEN\",this.eyeID_R=\"PARAM_EYE_R_OPEN\"}function _(){this.tr=new Float32Array(16),this.identity()}function a(t,i){_.prototype.constructor.call(this),this.width=t,this.height=i}function h(){MotionQueueManager.prototype.constructor.call(this),this.currentPriority=null,this.reservePriority=null,this.super=MotionQueueManager.prototype}function l(){this.physicsList=new Array,this.startTimeMSec=UtSystem.getUserTimeMSec()}function $(){this.lastTime=0,this.lastModel=null,this.partsGroups=new Array}function u(t){this.paramIndex=-1,this.partsIndex=-1,this.link=null,this.id=t}function p(){this.EPSILON=.01,this.faceTargetX=0,this.faceTargetY=0,this.faceX=0,this.faceY=0,this.faceVX=0,this.faceVY=0,this.lastTimeSec=0}function f(){_.prototype.constructor.call(this),this.screenLeft=null,this.screenRight=null,this.screenTop=null,this.screenBottom=null,this.maxLeft=null,this.maxRight=null,this.maxTop=null,this.maxBottom=null,this.max=Number.MAX_VALUE,this.min=0}function c(){}var d=0;r.prototype.getModelMatrix=function(){return this.modelMatrix},r.prototype.setAlpha=function(t){t&gt;.999&amp;&amp;(t=1),t&lt;.001&amp;&amp;(t=0),this.alpha=t},r.prototype.getAlpha=function(){return this.alpha},r.prototype.isInitialized=function(){return this.initialized},r.prototype.setInitialized=function(t){this.initialized=t},r.prototype.isUpdating=function(){return this.updating},r.prototype.setUpdating=function(t){this.updating=t},r.prototype.getLive2DModel=function(){return this.live2DModel},r.prototype.setLipSync=function(t){this.lipSync=t},r.prototype.setLipSyncValue=function(t){this.lipSyncValue=t},r.prototype.setAccel=function(t,i,e){this.accelX=t,this.accelY=i,this.accelZ=e},r.prototype.setDrag=function(t,i){this.dragX=t,this.dragY=i},r.prototype.getMainMotionManager=function(){return this.mainMotionManager},r.prototype.getExpressionManager=function(){return this.expressionManager},r.prototype.loadModelData=function(t,i){var e=c.getPlatformManager();this.debugMode&amp;&amp;e.log(\"Load model : \"+t);var r=this;e.loadLive2DModel(t,function(t){if(r.live2DModel=t,r.live2DModel.saveParam(),0!=Live2D.getError())return void console.error(\"Error : Failed to loadModelData().\");r.modelMatrix=new a(r.live2DModel.getCanvasWidth(),r.live2DModel.getCanvasHeight()),r.modelMatrix.setWidth(2),r.modelMatrix.setCenterPosition(0,0),i(r.live2DModel)})},r.prototype.loadTexture=function(t,i,e){d++;var r=c.getPlatformManager();this.debugMode&amp;&amp;r.log(\"Load Texture : \"+i);var o=this;r.loadTexture(this.live2DModel,t,i,function(){d--,0==d&amp;&amp;(o.isTexLoaded=!0),\"function\"==typeof e&amp;&amp;e()})},r.prototype.loadMotion=function(t,i,e){var r=c.getPlatformManager();this.debugMode&amp;&amp;r.log(\"Load Motion : \"+i);var o=null,n=this;r.loadBytes(i,function(i){o=Live2DMotion.loadMotion(i),null!=t&amp;&amp;(n.motions[t]=o),e(o)})},r.prototype.loadExpression=function(t,i,e){var r=c.getPlatformManager();this.debugMode&amp;&amp;r.log(\"Load Expression : \"+i);var n=this;r.loadBytes(i,function(i){null!=t&amp;&amp;(n.expressions[t]=o.loadJson(i)),\"function\"==typeof e&amp;&amp;e()})},r.prototype.loadPose=function(t,i){var e=c.getPlatformManager();this.debugMode&amp;&amp;e.log(\"Load Pose : \"+t);var r=this;try{e.loadBytes(t,function(t){r.pose=$.load(t),\"function\"==typeof i&amp;&amp;i()})}catch(t){console.warn(t)}},r.prototype.loadPhysics=function(t){var i=c.getPlatformManager();this.debugMode&amp;&amp;i.log(\"Load Physics : \"+t);var e=this;try{i.loadBytes(t,function(t){e.physics=l.load(t)})}catch(t){console.warn(t)}},r.prototype.hitTestSimple=function(t,i,e){if(null===this.live2DModel)return!1;var r=this.live2DModel.getDrawDataIndex(t);if(r&lt;0)return!1;for(var o=this.live2DModel.getTransformedPoints(r),n=this.live2DModel.getCanvasWidth(),s=0,_=this.live2DModel.getCanvasHeight(),a=0,h=0;hs&amp;&amp;(s=l),$&lt;_&amp;&amp;(_=$),$&gt;a&amp;&amp;(a=$)}var u=this.modelMatrix.invertTransformX(i),p=this.modelMatrix.invertTransformY(e);return n&lt;=u&amp;&amp;u&lt;=s&amp;&amp;_&lt;=p&amp;&amp;p&lt;=a},r.prototype.hitTestSimpleCustom=function(t,i,e,r){return null!==this.live2DModel&amp;&amp;(e&gt;=t[0]&amp;&amp;e&lt;=i[0]&amp;&amp;r&lt;=t[1]&amp;&amp;r&gt;=i[1])},o.prototype=new AMotion,o.EXPRESSION_DEFAULT=\"DEFAULT\",o.TYPE_SET=0,o.TYPE_ADD=1,o.TYPE_MULT=2,o.loadJson=function(t){var i=new o,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t);if(i.setFadeIn(parseInt(r.fade_in)&gt;0?parseInt(r.fade_in):1e3),i.setFadeOut(parseInt(r.fade_out)&gt;0?parseInt(r.fade_out):1e3),null==r.params)return i;var s=r.params,_=s.length;i.paramList=[];for(var a=0;a&lt;_;a++){var h=s[a],l=h.id.toString(),$=parseFloat(h.val),u=o.TYPE_ADD,p=null!=h.calc?h.calc.toString():\"add\";if((u=\"add\"===p?o.TYPE_ADD:\"mult\"===p?o.TYPE_MULT:\"set\"===p?o.TYPE_SET:o.TYPE_ADD)==o.TYPE_ADD){var f=null==h.def?0:parseFloat(h.def);$-=f}else if(u==o.TYPE_MULT){var f=null==h.def?1:parseFloat(h.def);0==f&amp;&amp;(f=1),$/=f}var d=new n;d.id=l,d.type=u,d.value=$,i.paramList.push(d)}return i},o.prototype.updateParamExe=function(t,i,e,r){for(var n=this.paramList.length-1;n&gt;=0;--n){var s=this.paramList[n];s.type==o.TYPE_ADD?t.addToParamFloat(s.id,s.value,e):s.type==o.TYPE_MULT?t.multParamFloat(s.id,s.value,e):s.type==o.TYPE_SET&amp;&amp;t.setParamFloat(s.id,s.value,e)}},s.prototype.calcNextBlink=function(){return UtSystem.getUserTimeMSec()+Math.random()*(2*this.blinkIntervalMsec-1)},s.prototype.setInterval=function(t){this.blinkIntervalMsec=t},s.prototype.setEyeMotion=function(t,i,e){this.closingMotionMsec=t,this.closedMotionMsec=i,this.openingMotionMsec=e},s.prototype.updateParam=function(t){var i,e=UtSystem.getUserTimeMSec(),r=0;switch(this.eyeState){case g.STATE_CLOSING:r=(e-this.stateStartTime)/this.closingMotionMsec,r&gt;=1&amp;&amp;(r=1,this.eyeState=g.STATE_CLOSED,this.stateStartTime=e),i=1-r;break;case g.STATE_CLOSED:r=(e-this.stateStartTime)/this.closedMotionMsec,r&gt;=1&amp;&amp;(this.eyeState=g.STATE_OPENING,this.stateStartTime=e),i=0;break;case g.STATE_OPENING:r=(e-this.stateStartTime)/this.openingMotionMsec,r&gt;=1&amp;&amp;(r=1,this.eyeState=g.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink()),i=r;break;case g.STATE_INTERVAL:this.nextBlinkTime=t)&amp;&amp;(!(this.currentPriority&gt;=t)&amp;&amp;(this.reservePriority=t,!0))},h.prototype.setReservePriority=function(t){this.reservePriority=t},h.prototype.updateParam=function(t){var i=MotionQueueManager.prototype.updateParam.call(this,t);return this.isFinished()&amp;&amp;(this.currentPriority=0),i},h.prototype.startMotionPrio=function(t,i){return i==this.reservePriority&amp;&amp;(this.reservePriority=0),this.currentPriority=i,this.startMotion(t,!1)},l.load=function(t){for(var i=new l,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t),o=r.physics_hair,n=o.length,s=0;s"},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2021-07-26T14:44:42.337Z","comments":false,"path":"tags/index.html","permalink":"https://dwhboke.com/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-03-03T12:47:39.022Z","updated":"2021-10-14T02:13:24.113Z","comments":false,"path":"List/gallery/index.html","permalink":"https://dwhboke.com/List/gallery/index.html","excerpt":"","text":"壁紙 世俗的欲望 OH MY GIRL 關於OH MY GIRL的圖片"},{"title":"","date":"2022-03-05T08:41:10.000Z","updated":"2022-05-13T05:46:06.725Z","comments":false,"path":"List/movies/index.html","permalink":"https://dwhboke.com/List/movies/index.html","excerpt":"","text":"励志视频"},{"title":"Music-BBOX","date":"2020-04-23T04:58:56.000Z","updated":"2021-07-26T07:32:21.052Z","comments":false,"path":"List/music/index.html","permalink":"https://dwhboke.com/List/music/index.html","excerpt":"","text":""},{"title":"","date":"2022-03-02T11:47:07.605Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/demo/demo1.html","permalink":"https://dwhboke.com/live2d-widget-master/demo/demo1.html","excerpt":"","text":""},{"title":"","date":"2022-03-02T11:47:07.605Z","updated":"2019-12-04T15:56:02.000Z","comments":true,"path":"live2d-widget-master/demo/demo2.html","permalink":"https://dwhboke.com/live2d-widget-master/demo/demo2.html","excerpt":"","text":"MIMIPOWERED 看板娘登陆平台 用户名 密码 记住我 登录 Copyleft © Mimi 2019 $(function() { \"use strict\"; if (!CSS.supports(\"clip-path\", \"circle(120px at center)\") && !CSS.supports(\"-webkit-clip-path\", \"circle(120px at center)\")) { $(\"#stage\").html(''); return; } var apiURL = \"https://live2d.fghrsh.net/api\", state = 0, modelId = localStorage.getItem(\"modelId\"), modelTexturesId = localStorage.getItem(\"modelTexturesId\"); if (modelId == null) { modelId = 1; modelTexturesId = 53; } loadModel(modelId, modelTexturesId); function loadModel(modelId, modelTexturesId) { localStorage.setItem(\"modelId\", modelId); if (modelTexturesId === undefined) modelTexturesId = 0; localStorage.setItem(\"modelTexturesId\", modelTexturesId); loadlive2d(\"live2d\", `${apiURL}/get/?id=${modelId}-${modelTexturesId}`, null); console.log(\"live2d\", `模型 ${modelId}-${modelTexturesId} 加载完成`); setTimeout(function() { $(\"#cover\").css(\"bottom\", \"80%\"); state = 2; }, 2000); } function loadRandModel() { var modelId = localStorage.getItem(\"modelId\"), modelTexturesId = localStorage.getItem(\"modelTexturesId\"); $.ajax({ cache: false, url: `${apiURL}/rand_textures/?id=${modelId}-${modelTexturesId}`, dataType: \"json\", success: function(result) { loadModel(modelId, result.textures[\"id\"]); setTimeout(function() { state = 2; $(\"#cover\").css(\"bottom\", \"80%\"); $(\"#refresh\").attr(\"href\", \"javascript:refresh()\"); }, 1000); } }); } function loadOtherModel() { var modelId = localStorage.getItem(\"modelId\"); $.ajax({ cache: false, url: `${apiURL}/switch/?id=${modelId}`, dataType: \"json\", success: function(result) { loadModel(result.model[\"id\"]); } }); } window.info = function() { //Your code here... $.getJSON(\"https://v1.hitokoto.cn/\", function(data) { alert(\"『\" + data.hitokoto + \"』——\" + data.from); }); } window.refresh = function() { state = 0; $(\"#cover\").css(\"bottom\", \"10%\"); $(\"#refresh\").attr(\"href\", \"javascript:void(0)\"); setTimeout(loadRandModel, 1000); } $(\"#handle\").click(function() { if (state == 1) { state = 2; $(\"#cover\").css(\"bottom\", \"80%\"); } else if (state == 2) { state = 1; $(\"#cover\").css(\"bottom\", \"20%\"); } }); $(\"input[type=password]\").focus(function() { if (state == 2) { state = 1; $(\"#cover\").css(\"bottom\", \"20%\"); } }).blur(function() { if (state == 1) { state = 2; $(\"#cover\").css(\"bottom\", \"80%\"); } }); });"},{"title":"","date":"2021-09-28T14:56:14.000Z","updated":"2022-03-04T13:03:42.262Z","comments":false,"path":"List/gallery/ohmygirl/index.html","permalink":"https://dwhboke.com/List/gallery/ohmygirl/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2021-10-14T02:11:35.135Z","comments":false,"path":"List/gallery/wallpaper/index.html","permalink":"https://dwhboke.com/List/gallery/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"反射之Class类","slug":"32-反射之Class类","date":"2022-08-13T06:57:00.000Z","updated":"2022-08-13T07:07:39.275Z","comments":false,"path":"posts/32.html","link":"","permalink":"https://dwhboke.com/posts/32.html","excerpt":"","text":"反射之Class类 Class也是类，因此也需要继承Object类 Class类对象不是new出来的，而是系统创建的 对于某个类的Class类对象，在内存中只有一份，因为类只会加载一次 每个类的实例都会记得自己是由哪个Class实例所生成 通过Class可以完整地得到一个类的完整结构，通过一系列API Class对象是存放在堆的 类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据（包括方法代码，变量名，方法名，访问权限等等）","categories":[{"name":"反射","slug":"反射","permalink":"https://dwhboke.com/categories/%E5%8F%8D%E5%B0%84/"}],"tags":[{"name":"技术 操作 java","slug":"技术-操作-java","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-java/"}]},{"title":"java反射机制","slug":"30-java反射机制","date":"2022-08-13T06:25:00.000Z","updated":"2022-08-13T07:14:58.096Z","comments":false,"path":"posts/30.html","link":"","permalink":"https://dwhboke.com/posts/30.html","excerpt":"","text":"java反射机制简介 反射机制允许程序在执行器借助于ReflectionAPI取得任何类的内部信息（比如成员变量，构造器，成员方法等等），并且能操作对象的属性以及方法。 加载完类之后，在堆中产生了一个Class类型对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像是一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射 本质上相当于是把属性，方法都是作为对象，然后调用一些API获得自己想要的东西 传统写法： 对象.成员变量 反射： 成员变量对象.get(对象) java反射机制的作用 在运行的时候判断一个对象所属的类 在运行时构造任意一个类的对象 在运行时得到任意一个类所具有的成员变量和方法 在运行时调用任意一个对象的成员变量和方法 生成动态代理 反射相关的主要类 java.lang.Class:代表一个类，Class对象表示某一个类加载后在堆中的对象 java.lang.reflect.Method:代表类的方法，Method对象就代表某个类的方法 java.lang.reflect.Field:代表类的成员变量，Field对象就代表某个类的方法 java.lang.reflect.Constructor:代表类的构造方法，Constructor对象就代表某个类的方法 反射的优缺点 优点：可以动态的创建和使用对象（也是框架底层核心），使用灵活，没有反射机制，框架就会失去底层支撑 缺点：使用反射基本就是解释执行，对执行速度有影响 反射调用优化-关闭访问检查 Method和Field、Constructor对象都有setAccessible()方法 setAccessi作用是启动和禁用访问安全检查的开关 参数为true就是反射执行时不使用安全检查，参数为false就表示反射的对象执行访问的时候使用安全检查","categories":[{"name":"反射","slug":"反射","permalink":"https://dwhboke.com/categories/%E5%8F%8D%E5%B0%84/"}],"tags":[{"name":"技术 操作 java","slug":"技术-操作-java","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-java/"}]},{"title":"反射相关类","slug":"31-反射相关类","date":"2022-08-13T06:25:00.000Z","updated":"2022-08-13T07:15:00.431Z","comments":false,"path":"posts/31.html","link":"","permalink":"https://dwhboke.com/posts/31.html","excerpt":"","text":"反射相关类java.lang.reflect.Field 代表类的成员变量，Field对象表示某个类的成员变量 //加载类，返回Class类型的对象cls Class cls = Class。forName（classfullpath）; Field nameField = cls.getField(\"age\"); System.out.println(nameField.get(o)); 注：cls为Class类型的对象，o为传统的对象 java.lang.reflect.Constructor 代表类的构造方法，Constructor对象表示构造器 Constructor constructor = cls.getConstructor();//()中可以指定构造器参数类型，没有就返回无参构造器 如：Constructor constructor = cls.getConstructor(String.class);","categories":[{"name":"反射","slug":"反射","permalink":"https://dwhboke.com/categories/%E5%8F%8D%E5%B0%84/"}],"tags":[{"name":"技术 操作 java","slug":"技术-操作-java","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-java/"}]},{"title":"单例模式","slug":"29-单例模式","date":"2022-08-13T06:21:00.000Z","updated":"2022-08-13T07:14:56.188Z","comments":false,"path":"posts/29.html","link":"","permalink":"https://dwhboke.com/posts/29.html","excerpt":"","text":"单例模式单例模式的几种方式： 饿汉式（静态常量） 饿汉式（静态代码块） 懒汉式（线程不安全） 懒汉式（线程安全，同步方法） 懒汉式（线程安全，同步代码块） 双重检查 静态内部类 枚举","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://dwhboke.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"技术 操作 设计模式","slug":"技术-操作-设计模式","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"类的六大关系","slug":"28-类的六大关系","date":"2022-08-13T06:20:00.000Z","updated":"2022-08-13T07:14:53.748Z","comments":false,"path":"posts/28.html","link":"","permalink":"https://dwhboke.com/posts/28.html","excerpt":"","text":"类的六大关系依赖 只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编译都无法通过 比如：A用到了B，称A依赖B 如果是类中的成员属性 如果是方法的返回类型 是方法接收的参数类型 方法中使用到了 泛化 泛化就是集成关系，他是依赖关系的特例 实现关系 接口被某个类实现 关联 关联关系实际上就是类和类之间的联系，它是依赖关系的特例 关联具有导航性：即双向关系或单项关系 单向1对1 public class Person{ private IDCard card; } public class IDCard{ } 双向1对1 public class Person{ private IDCard card; } public class IDCard{ private Person person; } 聚合 表示整体和部分的关系，整体和部分是可以分开的，聚合关系也是关联关系的特例，所以他具有关联的导航性和多重性 public class Computer{ private Mouse mouse; private Moniter moniter; } 组合 如果整体和部分的关系上不能分开，就升级成组合关系 public class Computer{ private Mouse mouse = new Mousse(); private Moniter moniter = new Moniter(); }","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://dwhboke.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"技术 操作 设计模式","slug":"技术-操作-设计模式","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"java设计模式七大原则","slug":"27-java设计模式七大原则","date":"2022-08-13T04:20:00.000Z","updated":"2022-08-13T07:14:22.678Z","comments":false,"path":"posts/27.html","link":"","permalink":"https://dwhboke.com/posts/27.html","excerpt":"","text":"java设计模式七大原则单一原则：基本介绍： 对类来说，一个类只负责一项职责。如类A负责职责1和职责2两个职责，当职责1需要变更时，可能会造成职责2执行错误，所以要把A类细分成两个类 优点： 降低类的复杂度 提高类的可读性，可维护性 降低变更引起的风险 通常情况下，都应该遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则 接口隔离原则基本介绍： 客户端不应该依赖它不需要的接口，即一个类对另外一个类的依赖应该建立在最小接口上，就是把大接口拆成小的 依赖倒转原则基本介绍： 高层模块不应该依赖低层模块，二者都应该依赖其抽象 抽象不应该依赖细节，细节应该依赖抽象 依赖倒转的中心思想是面向接口编程 依赖倒转的理念： 相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或者抽象类，细节就是具体的实现类 使用接口或者抽象类的目的是制定好规范你，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成 依赖关系传递的三种方式和应用案例 接口传递 public class Test { public static void main(String[] args) { OpenAndClose openAndClose = new OpenAndClose(); openAndClose.open(new Tv()); } } interface IOpenAndClose{ public void open(ITV tv); } interface ITV{ public void play(); } class Tv implements ITV{ @Override public void play() { System.out.println(\"电视机已打开\"); } } class OpenAndClose implements IOpenAndClose{ @Override public void open(ITV tv) { tv.play(); } } 构造方法传递 public class Test { public static void main(String[] args) { OpenAndClose openAndClose = new OpenAndClose(new Tv()); openAndClose.open(); } } interface IOpenAndClose{ public void open(); } interface ITV{ public void play(); } class Tv implements ITV{ @Override public void play() { System.out.println(\"电视机已打开\"); } } class OpenAndClose implements IOpenAndClose{ public ITV tv; @Override public void open() { this.tv.play(); } public OpenAndClose(ITV tv) { this.tv = tv; } } 通过setter传递 public class Test {//测试类 public static void main(String[] args) { OpenAndClose openAndClose = new OpenAndClose(); openAndClose.setTv(new Tv()); openAndClose.open(); } } interface IOpenAndClose{//电视剧打开的接口 public void open(); public void setTv(ITV tv); } interface ITV{ public void play();//抽象类 } class Tv implements ITV{//电视机 @Override public void play() { System.out.println(\"电视机已打开\"); } } class OpenAndClose implements IOpenAndClose{ public ITV tv; @Override public void open() { this.tv.play(); } @Override public void setTv(ITV tv) { this.tv = tv; } } 依赖倒转原则注意事项 低层模块尽量都有抽象类或者接口，或者二者都有，程序稳定性会更好 变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象之间就存在一个缓冲层，有利于程序扩展和优化 继承时遵循里氏替换原则 里氏替换原则 使用继承的时候，尽量不要去重写父类的方法 继承实际上让两个类的耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题 class A{ public int calculation(int a,int b){ return a + b; } } class B extends A{ public int calculation(int a,int b){ return a - b; } public int sum(int a, int b){ return calculation(a,b)+9; } } 解决方案 interface A_{ public int calculation(int a,int b); } class A implements A_{ public int calculation(int a,int b){ return a + b; } } class B implements A_{ private A a = new A(); public int calculation(int a,int b){ return a - b; } public int sum(int a, int b){ return calculation(a,b)+9; } public int sum2(int a,int b){ return this.a.calculation(a,b)+9; } } 开闭原则 一个软件实体类，模块和函数应该对扩展开放（对提供方法的地方），对修改关闭（对使用方法的地方），用抽象构建框架，用实现扩展细节 当软件需要变化的时候，尽量通过扩展软件实体的行为来实现变化，而不是修改已经有的代码来实现变化 编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则 迪米特法则基本介绍 一个对象应该对其他对象保持最少的了解 类和类的关系越密切，耦合度越大 迪米特法则又叫最少知道原则，一个类对自己依赖的类知道得越少越好，对于被依赖的类不管多么复杂，都应该尽量把逻辑封装在类的内部，对外除了提供的public方法，不对外泄露任何信息 迪米特法则还有个更简单的定义：只和直接的朋友通信 直接的朋友：每个对象都会和其他的对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，不是直接朋友的类最好不要以局部变量的形式出现在类的内部 合成复用原则基本介绍 尽量使用合成或者聚合的方式，而不是继承 多使用如下方案： public class P { public void test1(){ } public void test2(){ } } class D{ P p = new P(); public void test(){ p.test1(); p.test2(); } } public class P { public void test1(){ } public void test2(){ } } class D{ public void test(P p){ p.test1(); p.test2(); } } public class P { public void test1(){ } public void test2(){ } } class D{ private P p; public void setP(P p) { this.p = p; } public void test(){ p.test1(); p.test2(); } }","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://dwhboke.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"技术 操作 设计模式","slug":"技术-操作-设计模式","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"Spring配置","slug":"26-Spring配置","date":"2022-05-26T04:20:00.000Z","updated":"2022-05-26T04:20:21.148Z","comments":false,"path":"posts/26.html","link":"","permalink":"https://dwhboke.com/posts/26.html","excerpt":"","text":"Spring配置Spring手动开发（不推荐）导入Spring开发的基本包坐标 在pom.xml中配置 &lt;properties&gt; &lt;spring.version&gt;5.0.5.RELEASE&lt;/spring.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 编写Dao接口和实现类 在main/java中编写 public interface UserDao { public void save(); } public class UserDaoImpl implements UserDao { @Override public void save() { System.out.println(\"UserDao save method running....\"); } } 创建Spring核心配置文件 在类路径resources创建applicationContext.xml配置文件 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;/beans&gt; Spring配置文件中导入实现类(3种) 无参构造方法实例化，根据无参构造创建类对象，如果bean中没有默认无参构造会创建失败 &lt;bean id=\"userDao\" class=\"com.chinasofti.dao.impl.UserDaoImpl\"/&gt; 静态工厂 先创建一个静态工厂类，然后去Spring配置文件中加入 public class StaticFactoryBean { public static UserDao createUserDao(){ return new UserDaoImpl(); } } &lt;bean id=\"userDao\" class=\"com.chinasofti.factory.StaticFactoryBean\" factory-method=\"createUserDao\" /&gt; 非静态工厂 public class DynamicFactoryBean { public UserDao createUserDao(){ return new UserDaoImpl(); } } &lt;bean id=\"factoryBean\" class=\"com.chinasofti.factory.DynamicFactoryBean\"/&gt; &lt;bean id=\"userDao\" factory-bean=\"factoryBean\" factory-method=\"createUserDao\"/&gt; 使用Spring的API获得Bean实例（在src/test/java路径下创建测试类） 举例： @Test public void test1(){ ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); UserDao userDao = (UserDao) applicationContext.getBean(\"userDao\"); userDao.save(); } Bean依赖注入（需要创建service接口和一个service实现类）在src/main/java下创建service包，创建UserService，内部调用UserDao中save方法 例如 public class UserServiceImpl implements UserService { @Override public void save() { ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); UserDao userDao = (UserDao) applicationContext.getBean(\"userDao\"); userDao.save(); } } 将 UserServiceImpl 的创建权交给 Spring 修改配置文件 &lt;bean id=\"userService\" class=\"com.chinasofti.service.impl.UserServiceImpl\"/&gt; 从Spring容器中获得UserService进行操作 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); UserService userService = (UserService) applicationContext.getBean(\"userService\"); userService.save(); Bean依赖注入两个方式 set方法注入 在UserServiceImpl中添加UserDao方法 public class UserServiceImpl implements UserService { private UserDao userDao; public void setUserDao(UserDao userDao) { this.userDao = userDao; } @Override public void save() { userDao.save(); } } 配置Spring容器调用set方法进行注入 &lt;bean id=\"userDao\" class=\"com.chinasofti.dao.impl.UserDaoImpl\"/&gt; &lt;bean id=\"userService\" class=\"com.chinasofti.service.impl.UserServiceImpl\"&gt; &lt;property name=\"userDao\" ref=\"userDao\"/&gt; &lt;/bean&gt; 构造器 创建有参构造 public class UserServiceImpl implements UserService { @Override public void save() { ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); UserDao userDao = (UserDao) applicationContext.getBean(\"userDao\"); userDao.save(); } } 配置Spring容器调用有参构造时进行注入 &lt;bean id=\"userDao\" class=\"com.chinasofti.dao.impl.UserDaoImpl\"/&gt; &lt;bean id=\"userService\" class=\"com.chinasofti.service.impl.UserServiceImpl\"&gt; &lt;constructor-arg name=\"userDao\" ref=\"userDao\"&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; Bean的依赖注入之数据类型 普通数据类型注入 public class UserDaoImpl implements UserDao { private String company; private int age; public void setCompany(String company) { this.company = company; } public void setAge(int age) { this.age = age; } public void save() { System.out.println(company+\"===\"+age); System.out.println(\"UserDao save method running....\"); } } &lt;bean id=\"userDao\" class=\"com.chinasofti.dao.impl.UserDaoImpl\"&gt; &lt;property name=\"company\" value=\"中软国际\"&gt;&lt;/property&gt; &lt;property name=\"age\" value=\"15\"&gt;&lt;/property&gt; &lt;/bean&gt; 集合类型List&lt;String&gt; public class UserDaoImpl implements UserDao { private List&lt;String&gt; strList; public void setStrList(List&lt;String&gt; strList) { this.strList = strList; } public void save() { System.out.println(strList); System.out.println(\"UserDao save method running....\"); } } &lt;bean id=\"userDao\" class=\"com.chinasofti.dao.impl.UserDaoImpl\"&gt; &lt;property name=\"strList\"&gt; &lt;list&gt; &lt;value&gt;aaa&lt;/value&gt; &lt;value&gt;bbb&lt;/value&gt; &lt;value&gt;ccc&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; List&lt;User&gt; public class UserDaoImpl implements UserDao { private List&lt;User&gt; userList; public void setUserList(List&lt;User&gt; userList) { this.userList = userList; } public void save() { System.out.println(userList); System.out.println(\"UserDao save method running....\"); } } &lt;bean id=\"u1\" class=\"com.chinasofti.domain.User\"/&gt; &lt;bean id=\"u2\" class=\"com.chinasofti.domain.User\"/&gt; &lt;bean id=\"userDao\" class&lt;property =\"com.chinasofti name=\"userList\" .dao.impl.UserDaoImpl\" &gt; &gt; &lt;list&gt; &lt;bean class=\"com.chinasofti.domain.User\"/&gt; &lt;bean class=\"com.chinasofti.domain.User\"/&gt; &lt;ref bean=\"u1\"/&gt; &lt;ref bean=\"u2\"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; Map&lt;String,User&gt; public class UserDaoImpl implements UserDao { private Map&lt;String,User&gt; userMap; public void setUserMap(Map&lt;String, User&gt; userMap) { this.userMap = userMap; } public void save() { System.out.println(userMap); System.out.println(\"UserDao save method running....\"); } } &lt;bean id=\"u1\" class=\"com.chinasofti.domain.User\"/&gt; &lt;bean id=\"u2\" class=\"com.chinasofti.domain.User\"/&gt; &lt;bean id=\"userDao\" class&lt;property =\"com.chinasofti name=\"userMap\" .dao.impl.UserDaoImpl\" &gt; &gt; &lt;map&gt; &lt;entry key=\"user1\" value-ref=\"u1\"/&gt; &lt;entry key=\"user2\" value-ref=\"u2\"/&gt; &lt;/map&gt; &lt;/property&gt; &lt;/bean&gt; Properties public class UserDaoImpl implements UserDao { private Properties properties; public void setProperties(Properties properties) { this.properties = properties; } public void save() { System.out.println(properties); System.out.println(\"UserDao save method running....\"); } } &lt;bean id=\"userDao\" class=\"com.chinasofti.dao.impl.UserDaoImpl\"&gt; &lt;property name=\"properties\"&gt; &lt;props&gt; &lt;prop key=\"p1\"&gt;aaa&lt;/prop&gt; &lt;prop key=\"p2\"&gt;bbb&lt;/prop&gt; &lt;prop key=\"p3\"&gt;ccc&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; 配置数据源手动创建（不推荐） pom.xml导入mysql数据库驱动 &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.39&lt;/version&gt; &lt;/dependency&gt; 创建C3P0连接池 @Test public void testC3P0() throws Exception { //创建数据源 ComboPooledDataSource dataSource = new ComboPooledDataSource(); //设置数据库连接参数 dataSource.setDriverClass(\"com.mysql.jdbc.Driver\"); dataSource.setJdbcUrl(\"jdbc:mysql://localhost:3306/test\"); dataSource.setUser(\"root\"); dataSource.setPassword(\"root\"); //获得连接对象 Connection connection = dataSource.getConnection(); System.out.println(connection); } 或者创建Druid连接池 @Test public void testDruid() throws Exception { //创建数据源 DruidDataSource dataSource = new DruidDataSource(); //设置数据库连接参数 dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\"); dataSource.setUrl(\"jdbc:mysql://localhost:3306/test\"); dataSource.setUsername(\"root\"); dataSource.setPassword(\"root\"); //获得连接对象 Connection connection = dataSource.getConnection(); System.out.println(connection); } 或者创建jdbc.properties并读取 jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/test jdbc.username=root jdbc.password=root @Test public void testC3P0ByProperties() throws Exception { //加载类路径下的jdbc.properties ResourceBundle rb = ResourceBundle.getBundle(\"jdbc\"); ComboPooledDataSource dataSource = new ComboPooledDataSource(); dataSource.setDriverClass(rb.getString(\"jdbc.driver\")); dataSource.setJdbcUrl(rb.getString(\"jdbc.url\")); dataSource.setUser(rb.getString(\"jdbc.username\")); dataSource.setPassword(rb.getString(\"jdbc.password\")); Connection connection = dataSource.getConnection(); System.out.println(connection); } Spring配置（推荐） DataSource创建交给Spring &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/test\"/&gt; &lt;property name=\"user\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"root\"/&gt; &lt;/bean&gt; 测试从容器中获取数据源 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); DataSource dataSource = (DataSource) applicationContext.getBean(\"dataSource\"); Connection connection = dataSource.getConnection(); System.out.println(connection); 抽取jdbc配置文件，需要引入context命名空间和约束路径 命名空间 xmlns:context=\"http://www.springframework.org/schema/context\" 约束路径 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 抽取配置 &lt;context:property-placeholder location=\"classpath:jdbc.properties\"/&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"${jdbc.driver}\"/&gt; &lt;property name=\"jdbcUrl\" value=\"${jdbc.url}\"/&gt; &lt;property name=\"user\" value=\"${jdbc.username}\"/&gt; &lt;property name=\"password\" value=\"${jdbc.password}\"/&gt; &lt;/bean&gt; Spring容器加载properties文件 &lt;context:property-placeholder location=\"xx.properties\"/&gt; &lt;property name=\"\" value=\"${key}\"/&gt; Spring注解开发（推荐）原始注解@Component 使用在类上用于实例化Bean @Controller 使用在web层类上用于实例化Bean @Service 使用在service层类上用于实例化Bean @Repository 使用在dao层类上用于实例化Bean @Autowired 使用在字段上用于根据类型依赖注入 @Qualifier 结合@Autowired一起使用用于根据名称进行依赖注入 @Resource 相当于@Autowired+@Qualifier，按照名称进行注入 @Value 注入普通属性 @Scope 标注Bean的作用范围 @PostConstruct 使用在方法上标注该方法是Bean的初始化方法 @PreDestroy 使用在方法上标注该方法是Bean的销毁方法 需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean 需要进行扫描以便识别使用注解配置的类、字段和方法。 &lt;!--注解的组件扫描--&gt; &lt;context:component-scan base-package=\"com.chinasofti\"&gt;&lt;/ context:component-scan&gt; 使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。 //@Component(\"userDao\") @Repository(\"userDao\") public class UserDaoImpl implements UserDao { @Override public void save() { System.out.println(\"save running... ...\"); } } 使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化 使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入 //@Component(\"userService\") @Service(\"userService\") public class UserServiceImpl implements UserService { /*@Autowired @Qualifier(\"userDao\")*/ @Resource(name=\"userDao\") private UserDao userDao; @Override public void save() { userDao.save(); } } 使用@Value进行字符串的注入 @Repository(\"userDao\") public class UserDaoImpl implements UserDao { @Value(\"注入普通数据\") private String str; @Value(\"${jdbc.driver}\") private String driver; @Override public void save() { System.out.println(str); System.out.println(driver); System.out.println(\"save running... ...\"); } } 使用@Scope标注Bean的范围 //@Scope(\"prototype\") @Scope(\"singleton\") public class UserDaoImpl implements UserDao { //此处省略代码 } 使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法 @PostConstruct public void init(){ System.out.println(\"初始化方法....\"); } @PreDestroy public void destroy(){ System.out.println(\"销毁方法.....\"); } 新注解 使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下： 非自定义的Bean的配置： 加载properties文件的配置： context:property-placeholder 组件扫描的配置： context:component-scan 引入其他文件： @Configuration 用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解 @ComponentScan 用于指定 Spring 在初始化容器时要扫描的包。 作用和在 Spring 的 xml 配置文件中的 &lt;context:component-scan base-package=\"com.chinasofti\"/&gt;一 @Bean 样使用在方法上，标注将该方法的返回值存储到 Spring 容器中 @PropertySource 用于加载.properties 文件中的配置 @Import 用于导入其他配置类 3. 使用示例 ```java @Configuration @ComponentScan(\"com.chinasofti\") @Import({DataSourceConfiguration.class}) public class SpringConfiguration { } @PropertySource(\"classpath:jdbc.properties\") public class DataSourceConfiguration { @Value(\"${jdbc.driver}\") private String driver; @Value(\"${jdbc.url}\") private String url; @Value(\"${jdbc.username}\") private String username; @Value(\"${jdbc.password}\") private String password; @Bean(name=\"dataSource\") public DataSource getDataSource() throws PropertyVetoException { ComboPooledDataSource dataSource = new ComboPooledDataSource(); dataSource.setDriverClass(driver); dataSource.setJdbcUrl(url); dataSource.setUser(username); dataSource.setPassword(password); return dataSource; } 测试加载核心配置类创建Spring容器 @Test public void testAnnoConfiguration() throws Exception { ApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfiguration.class); UserService userService = (UserService) applicationContext.getBean(\"userService\"); userService.save(); DataSource dataSource = (DataSource) applicationContext.getBean(\"dataSource\"); Connection connection = dataSource.getConnection(); System.out.println(connection); } 集成Junit 在测试类中，每个测试方法都有以下两行代码： ApplicationContext ac = new ClassPathXmlApplicationContext(\"bean.xml\"); IAccountService as = ac.getBean(\"accountService\",IAccountService.class); 这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。 解决方案： 让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它 ，将需要进行测试Bean直接在测试类中进行注入 导入spring集成Junit的坐标 &lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;5.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; 使用@Runwith注解替换原来的运行期 @RunWith(SpringJUnit4ClassRunner.class) public class SpringJunitTest { } 使用@ContextConfiguration指定配置文件或配置类 @RunWith(SpringJUnit4ClassRunner.class) //加载spring核心配置文件 //@ContextConfiguration(value = {\"classpath:applicationContext.xml\"}) //加载spring核心配置类 @ContextConfiguration(classes = {SpringConfiguration.class}) public class SpringJunitTest { }使用@Autowired注入需要测试的对象 使用@Autowired注入需要测试的对象 @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {SpringConfiguration.class}) public class SpringJunitTest { @Autowired private UserService userService; } 创建测试方法进行测试 @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {SpringConfiguration.class}) public class SpringJunitTest { @Autowired private UserService userService; @Test public void testUserService(){ userService.save(); } } 总结步骤 导入spring集成Junit的坐标 使用@Runwith注解替换原来的运行期 使用@ContextConfiguration指定配置文件或配置类 使用@Autowired注入需要测试的对象 创建测试方法进行测试","categories":[{"name":"java 框架","slug":"java-框架","permalink":"https://dwhboke.com/categories/java-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"技术 操作 框架","slug":"技术-操作-框架","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E6%A1%86%E6%9E%B6/"}]},{"title":"MyBatis配置","slug":"25-MyBatis配置","date":"2022-05-26T04:19:00.000Z","updated":"2022-05-26T04:21:29.896Z","comments":false,"path":"posts/25.html","link":"","permalink":"https://dwhboke.com/posts/25.html","excerpt":"","text":"MyBatis配置搭建MyBatis创建maven工程 在pom.xml中引入依赖 &lt;dependencies&gt; &lt;!-- Mybatis核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.7&lt;/version&gt; &lt;/dependency&gt; &lt;!-- junit测试 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- MySQL驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.25&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 创建MyBatis核心配置文件mybatis-config.xml 核心文件放置在src/main/resources目录下 配置内容 &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;!--设置连接数据库的环境--&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;transactionManager type=\"JDBC\"/&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/MyBatis\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"123456\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--引入映射文件--&gt; &lt;mappers&gt; &lt;mapper resource=\"mappers/UserMapper.xml\"/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 创建mapper接口（不推荐手动创建）public interface UserMapper { /** * 添加用户信息 */ int insertUser(); } 创建实体类，和数据库表相互呼应创建MyBatis映射文件（不推荐手动创建）&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.chinasofti.mybatis.mapper.UserMapper\"&gt; &lt;!--int insertUser();--&gt; &lt;insert id=\"insertUser\"&gt; insert into t_user values(null,'张三','123',23,'女') &lt;/insert&gt; &lt;/mapper&gt; 通过junit测试功能（手动创建，建议在路径：java/utils/ConfigUtils.java）//读取MyBatis的核心配置文件 InputStream is = Resources.getResourceAsStream(\"mybatis-config.xml\"); //创建SqlSessionFactoryBuilder对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象 SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is); //创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务 //SqlSession sqlSession = sqlSessionFactory.openSession(); //创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交 SqlSession sqlSession = sqlSessionFactory.openSession(true); //通过代理模式创建UserMapper接口的代理实现类对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配 映射文件中的SQL标签，并执行标签中的SQL语句 int result = userMapper.insertUser(); //sqlSession.commit(); System.out.println(\"结果：\"+result); 加入log4j日志（手动） 在pom.xml加入依赖 &lt;!-- log4j日志 --&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; 在src/main/resources加入log4j配置文件log4j.xml &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"&gt; &lt;log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"&gt; &lt;appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\"&gt; &lt;param name=\"Encoding\" value=\"UTF-8\" /&gt; &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt; &lt;param name=\"ConversionPattern\" value=\"%-5p %d{MM-dd HH:mm:ss,SSS} %m (%F:%L) \\n\" /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;logger name=\"java.sql\"&gt; &lt;level value=\"debug\" /&gt; &lt;/logger&gt; &lt;logger name=\"org.apache.ibatis\"&gt; &lt;level value=\"info\" /&gt; &lt;/logger&gt; &lt;root&gt; &lt;level value=\"debug\" /&gt; &lt;appender-ref ref=\"STDOUT\" /&gt; &lt;/root&gt; &lt;/log4j:configuration&gt; 创建properties文件放在resources目录下 存放需要连接的数据库信息 jdbc.url=xx jdbc.driver=xx jdbc.username=xx jdbc.pwd=xx MyBatis的逆向工程（推荐）添加依赖和插件 在pom.xml 中添加以下依赖，如果之前添加过，就不需要重复 &lt;!-- 依赖MyBatis核心包 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.7&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 控制Maven在构建过程中相关配置 --&gt; &lt;build&gt; &lt;!-- 构建过程中用到的插件 --&gt; &lt;plugins&gt; &lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt; &lt;!-- 插件的依赖 --&gt; &lt;dependencies&gt; &lt;!-- 逆向工程的核心依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- MySQL驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.8&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 必须有MyBatis核心配置文件mybatis-config.xml 创建逆向工程配置文件generatorConfig.xml &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt; &lt;generatorConfiguration&gt; &lt;!-- targetRuntime: 执行生成的逆向工程的版本 MyBatis3Simple: 生成基本的CRUD（清新简洁版） MyBatis3: 生成带条件的CRUD（奢华尊享版） --&gt; &lt;context id=\"DB2Tables\" targetRuntime=\"MyBatis3Simple\"&gt; &lt;!-- 数据库的连接信息 --&gt; &lt;jdbcConnection driverClass=\"com.mysql.jdbc.Driver\" connectionURL=\"jdbc:mysql://localhost:3306/mybatis\" userId=\"root\" password=\"123456\"&gt; &lt;/jdbcConnection&gt; &lt;!-- javaBean的生成策略--&gt; &lt;javaModelGenerator targetProject targePackage =\".\\src\\main\\java\" =\"com.chinasofti &gt; .mybatis.bean\" &lt;property name=\"enableSubPackages\" value=\"true\" /&gt; &lt;property name=\"trimStrings\" value=\"true\" /&gt; &lt;/javaModelGenerator&gt; &lt;!-- SQL映射文件的生成策略 --&gt; &lt;sqlMapGenerator targetProjecttargtPackage =\".\\src\\main\\resources\" =\"com.chinasofti.mybatis.mapper\" &gt; &lt;property name=\"enableSubPackages\" value=\"true\" /&gt; &lt;/ sqlMapGenerator&gt; &lt;!-- Mapper接口的生成策略 --&gt; &lt;javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.chinasofti.mybatis.mapper\" targetProject=\".\\src\\main\\java\"&gt; &lt;property name=\"enableSubPackages\" value=\"true\" /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 逆向分析的表 --&gt; &lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt; &lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt; &lt;table tableName=\"t_emp\" domainObjectName=\"Emp\"/&gt; &lt;table tableName=\"t_dept\" domainObjectName=\"Dept\"/&gt; &lt;/context&gt; &lt;/generatorConfiguration&gt; 执行MBG插件中的generate目标 生成JavaBean、接口、映射文件 MyBatis使用注解开发（推荐） 注解开发就省略掉了映射文件 常用注解 @Insert：实现新增 @Update：实现更新 @Delete：实现删除 @Select：实现查询 @Result：实现结果集封装 @Results：可以与@Result 一起使用，封装多个结果集 @One：实现一对一结果集封装 @Many：实现一对多结果集封装 修改核心配置文件，使用注解替代配置文件，加载使用了注解的Mapper接口即可 &lt;mappers&gt; &lt;!--扫描使用注解的类--&gt; &lt;mapper class=\"com.chinasofti.mapper.UserMapper\"&gt;&lt;/ mapper&gt; &lt;/mappers&gt; 或者 &lt;mappers&gt; &lt;!--扫描使用注解的类所在的包--&gt; &lt;package name=\"com.chinasofti.mapper\"&gt;&lt;/ package&gt; &lt;/mappers&gt; MyBatis注解开发逆向生成 在逆向生成文件generatorConfig.xml中 &lt;!--javaClientGenerator可以选择XMLMAPPER（xml文件形式）、ANNOTATEDMAPPER（注解形式）两种类型，还有一种example--&gt; &lt;javaClientGenerator type=\"ANNOTATEDMAPPER\" targetPackage=\"com.chinasofti.mapper\" targetProject=\".\\src\\main\\java\"&gt; 在type后面接ANNOTATEDMAPPER即可。","categories":[{"name":"java 框架","slug":"java-框架","permalink":"https://dwhboke.com/categories/java-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"技术 操作 框架","slug":"技术-操作-框架","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E6%A1%86%E6%9E%B6/"}]},{"title":"自定义异常","slug":"23-自定义异常","date":"2022-05-13T05:40:00.000Z","updated":"2022-05-13T05:52:13.582Z","comments":false,"path":"posts/23.html","link":"","permalink":"https://dwhboke.com/posts/23.html","excerpt":"","text":"自定义异常 定义类：自定义异常类需要继承Exception和RuntimeException 如果继承Exception，属于编译异常 如果继承RuntimeException，属于运行异常，一般来说，继承RuntimeException throw new XXXException(\"xxx\"); throws 和 throw throws代表异常处理的一种方式，位置在方法声明处，后面接异常类型 throw代表手动生成异常对象的关键字，位置在方法体中，后面接异常对象","categories":[{"name":"技术 学习 java 异常","slug":"技术-学习-java-异常","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E5%BC%82%E5%B8%B8/"}],"tags":[{"name":"技术 操作 学习 异常","slug":"技术-操作-学习-异常","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E5%BC%82%E5%B8%B8/"}]},{"title":"守护线程","slug":"24-守护线程","date":"2022-05-13T05:40:00.000Z","updated":"2022-05-13T05:41:42.579Z","comments":false,"path":"posts/24.html","link":"","permalink":"https://dwhboke.com/posts/24.html","excerpt":"","text":"守护线程 用户线程：工作线程，线程的任务执行完毕或通知方式结束 守护线程，一般为工作线程服务，所有的用户线程结束，守护线程自动结束 最常见的守护线程就是垃圾回收机制 线程生命周期 新建状态（new） 就绪状态（Ready） 运行状态（Running） 阻塞状态（Blocked） 等待状态（Waiting） 限时等待状态（Timed Waiting） 死亡状态（Terminated） 注意： 当使用实现Runnable时候，切记类的对象只能声明一个，否则在使用synchronize时，导致synchronize没有用，因为声明多个线程类对象会导致每一个对象单独使用一个run方法，并不会让同一个时刻只让一个对象进入run方法，他们仍然会同时分别进入属于自己的run方法 例如，当只new一个对象，多个线程公用一个run，则互斥锁就会生效，控制他们同一时刻只能一个Thread进到run里面 当new多个对象，然后每个对象一个Thread时候，就会成为一个Thread单独控制一个run，锁虽然在，但是每一个run有一个单独的Thread进入，因此锁就不会生效 同步方法（非静态）的锁可以是this，也可以是其他对象（要求是同一个对象） 同步方法（静态）的锁为当前类本身","categories":[{"name":"技术 学习 java 多线程","slug":"技术-学习-java-多线程","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"技术 操作 学习 多线程","slug":"技术-操作-学习-多线程","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"多线程机制","slug":"22-多线程机制","date":"2022-05-13T05:39:00.000Z","updated":"2022-05-13T05:41:58.998Z","comments":false,"path":"posts/22.html","link":"","permalink":"https://dwhboke.com/posts/22.html","excerpt":"","text":"多线程机制 主线程不会阻塞 所有线程都挂掉才会导致进程挂掉 不是由run方法来产生一个线程，而是由底层中的一个start0方法来产生一个新的线程，这个方法是本地方法，由JVM调用，底层是c/c++ 当start方法调用start0方法后，线程不会立马执行，只是把线程变成 了可运行状态，具体什么时候执行，取决于CPU，由CPU统一调度","categories":[{"name":"技术 学习 java 多线程","slug":"技术-学习-java-多线程","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"技术 操作 学习 多线程","slug":"技术-操作-学习-多线程","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"泛型类容梳理","slug":"21-泛型类容梳理","date":"2022-05-13T05:38:00.000Z","updated":"2022-05-13T05:38:54.972Z","comments":false,"path":"posts/21.html","link":"","permalink":"https://dwhboke.com/posts/21.html","excerpt":"","text":"泛型类容梳理为什么引入泛型 不能对加入到集合ArrayList中的数据类型进行约束（不安全） 遍历的时候，需要类型转换，如果集合中数据量比较大，对效率有影响 泛型的声明interface 接口&lt;T&gt;{} 和 class 类&lt;K,V&gt;{} T,V,K不代表值，而是代表类型 任意字母都可以。 泛型的实例化要在类名后面指定类型参数的值(使用泛型) List&lt;String&gt; strList = new ArrayList&lt;String&gt;(); Iterator&lt;Customer&gt;iterator = customers.iterator(); 自定义泛型 自定义泛型类 class 类名&lt;T,R&gt;{} 普通成员可以使用泛型（属性、方法） 使用泛型的数组，不能初始化（因为类型不确定，无法知道开辟多少空间） 静态方法中不能使用类的泛型 泛型类的类型，是在创建对象时确定的（因为创建对象时，需要指定确定类型） 如果创建对象时，没有指定类型，默认为Object 自定义泛型接口 interface 接口名&lt;T,R&gt;{} 接口中，静态成员也不能使用泛型（这个和泛型类规定一样） 泛型接口的类型，在继承接口或者实现接口时确定 没有指定类型，默认为Object 自定义泛型方法 修饰符&lt;T,R&gt;返回类型 方法名（参数列表）{} 泛型方法，可以定义在普通类中，也可以定义在泛型类中 当泛型方法被调用时，类型会调用 public void eat（E e）{}，修饰符后没有&lt;T,R&gt;，eat方法不是泛型方法，而是使用了泛型 泛型的继承和通配符 泛型不具备继承性 List&lt;Object&gt; list = new ArrayList&lt;String&gt;()//错误 :支持任意泛型类型 支持A类以及A类的子类，规定了泛型的上限 支持A类以及A的父类，不仅限于直接父类","categories":[{"name":"技术 学习 java 泛型","slug":"技术-学习-java-泛型","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E6%B3%9B%E5%9E%8B/"}],"tags":[{"name":"技术 操作 学习 泛型","slug":"技术-操作-学习-泛型","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"}]},{"title":"自定义泛型类","slug":"20-自定义泛型类","date":"2022-05-13T05:37:00.000Z","updated":"2022-05-13T05:54:33.383Z","comments":false,"path":"posts/20.html","link":"","permalink":"https://dwhboke.com/posts/20.html","excerpt":"","text":"自定义泛型类class 类名&lt;T,R...&gt;{ //...表示可以有多个泛型 } 注意细节： 普通成员可以使用泛型（属性、方法） 使用泛型的数组，不能初始化 静态方法中不能使用类的泛型 泛型类的类型，是在创建对象时确定的（因为创建对象时，需要指定确定类型） 如果在创建对象时，没有指定类型，默认为Object 自定义泛型接口interface 接口名&lt;T,R...&gt;{ } 注意细节： 接口中，静态成员也不能使用泛型（和泛型类的规定一样） 泛型接口的类型，在接口继承接口或者类实现接口的时候确定 没有指定类型，默认为Object 自定义泛型方法修饰符&lt;T,R...&gt;返回类型 方法名（T t,R r,...）{ } 注意细节： 泛型方法，可以定义在普通类中，也可以定义在泛型类中 当泛型方法被调用时，类型会确定 public void eat（E e）{}，修饰符后面没有&lt;T,R&gt;，所以eat不是泛型方法，而是使用了类或者其他东西的泛型 泛型方法既可以使用自己声明的泛型也可以使用类定声明的泛型 例如 class A&lt;R&gt;{ public&lt;K&gt; void hello(R r,K k){ } } 泛型的继承和通配符 泛型不具备继承性 ：支持任意泛型类型 ：支持A类以及A类的子类，规定了泛型的上限 ：支持A类以及A类的父类，不限于直接父类，规定了泛型的下限","categories":[{"name":"技术 学习 java 泛型","slug":"技术-学习-java-泛型","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E6%B3%9B%E5%9E%8B/"}],"tags":[{"name":"技术 操作 学习 泛型","slug":"技术-操作-学习-泛型","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"}]},{"title":"集合内容梳理","slug":"19-集合内容梳理","date":"2022-05-13T05:29:00.000Z","updated":"2022-05-13T05:29:52.046Z","comments":false,"path":"posts/19.html","link":"","permalink":"https://dwhboke.com/posts/19.html","excerpt":"","text":"集合内容梳理集合和数组的区别数组 长度开始必须指定，而且一旦指定不能更改 保存的内容必须为同一类型的元素 使用数组进行添加、删除元素比较麻烦 集合 可以动态的保存多个对象，使用方便 提供了一系列方便的操作对象的方法 使用集合添加、删除元素代码十分简洁 集合的分类Collection接口： Collection实现子类可以存放重复元素，有些不可以 Collection的实现类，有些是有序的（List），有些不是有序的（Set） Collection实现子类可以存放多个元素，每个元素可以是Object Collection接口没有直接的实现子类，是通过它的子接口Set和List来实现的 遍历方式：迭代器（Iterator）或者增强for List接口： List接口时Collection的子接口 List集合中的每一个元素都有其对应的顺序索引，即支持索引 List容器中的元素都对应一个整数型的序号记载在其容器中的位置，可以根据序号存取容器中的元素 List的常用实现类有ArrayList、LinkedList、Vector ArrayList ArrayList是由Object数组来实现存储的 可以加入多个null 可以重复添加 基本等同于Vector，但是ArrayList线程不安全 默认首次初始化为10（无参构造器），后面每次以1.5倍扩容 Vector 和ArrayList基本一样，但是它是线程安全的 LinkedList 底层实现了双向链表和双端队列的特点 LinkedList维护了两个属性first和last，分别指向首尾结点 每个结点又有prev，next，item三个属性，通过prev指向前一个，next指向后一个，最终实现双向链表 可以添加任何元素，可以重复，包括null 线程不安全 添加删除由链表完成，所以效率很高 Set接口： 无序（添加和取出顺序不一致），没有索引 不允许重复 常用实现类有HashSet、TreeSet、LinkedHashSet HashSet 底层是HashMap，HashMap底层是由数组+链表+红黑树组成 详细请见：https://dwhboke.com/posts/12.html Map接口： 常用实现类：HashMap、Hashtable、properties HashMap HashMap是Map接口使用最多的 Hash以Key-val对的形式存储数据 key不能重复，但是value可以重复，运行使用null键和null值 添加相同的key，则会覆盖原来的key-val，等同于修改 于HashSet一样，不保证映射的顺序，因为底层是以Hash表的形式存储 HashMap没有实现同步，线程不安全 底层维护了Node类型的数组table，默认null 创建对象时，，加载因子初始化为0.75 添加key-val时，通过key的哈希得到table的索引，然后判断该索引处是否有元素，没有就直接添加，如果有元素，则继续判断该元素的key和准备加入的key是否相等，如果相等就替换val，如果不等，就判断是树结构还是链表结构，做出相应处理，如果添加时候发现容量不足就要扩容 第一次添加，会扩容table为16，临界值为12（16*0.75），之后每次扩容为原来的2倍 当链表的元素超过一个值（默认为8），并且table的大小&gt;=某个值（默认为64）就会进行树化 Propertie 竭诚Hashtable类并且实现了Map接口，也是一种键值对的形式保存数据 使用特点和Hashtable类似 它可以用于从xxx.properties文件中，加载数据到Properties类对象，并且进行读取和修改 Collections工具类详情见：https://dwhboke.com/posts/16.html","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 集合","slug":"技术-操作-学习-集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"}]},{"title":"List接口的实现类（可以重复添加）","slug":"18-List接口的实现类（可以重复添加）","date":"2022-05-13T05:28:00.000Z","updated":"2022-05-13T05:29:13.987Z","comments":false,"path":"posts/18.html","link":"","permalink":"https://dwhboke.com/posts/18.html","excerpt":"","text":"List接口的实现类（可以重复添加）ArrayList 介绍：ArrayList是由数组来实现数据存储的，ArrayList基本上等同于Vector，除了ArrayList是线程不安全的，但是它效率高，在多线程情况下不建议使用ArrayList 底层：维护了一个Object数组，创建ArrayList对象，如果使用无参构造器，则初始容量为0，第一次添加扩容到10，后面每次按照1.5倍扩容 LinkedList 说明：LinkedLis底层是双向链表和双端队列特点，可添加任何元素，包括null，线程不安全 底层：双向链表，LinkedList中维护了两个属性first和last分别指向头结点和尾结点，每个节点中有prev、next、item三个属性，prev指向前一个，通过next指向后一个，最终完成双向链表 效率很高 Victor 和ArrayList基本相同，查询快，增删慢，线程安全，效率低 底层也是数组 三者的比较 相同点：记录插入顺序，可以重复，可以为null值 遍历方式 增强for for(Object o:col){ } 使用迭代器 Iterator iter = col.iterator(); while(iter.hasNext()){ Object o = iter.next(); } 普通for循环 注：增强for循环的底层就是迭代器","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 集合","slug":"技术-操作-学习-集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"}]},{"title":"TreeSet和TreeMap","slug":"17-TreeSet和TreeMap","date":"2022-05-13T05:27:00.000Z","updated":"2022-05-13T05:34:53.827Z","comments":false,"path":"posts/17.html","link":"","permalink":"https://dwhboke.com/posts/17.html","excerpt":"","text":"TreeSet和TreeMap相同点： 两者均是为了实现排序集合而存在的 两者构造器很多，都有空参构造器和传入一个Comparator的匿名对象的构造器，然后通过重写的Comparator方法进行排序 当没有传入Comparator时，会以你添加的对象的类型实现的Comparator接口的方法进行排序 TreeMap是TreeSet底层结构 运行速度都比hash慢 不同点： TreeSet只能存储一个对象，但是TreeMap存储两个对象Key和Value（仅仅对Key有序） TreeSet不能有重复对象（但是可以通过重写Comparator来改变），TreeMap可以存在（也可以改变） TreeMap底层采用红黑树实现","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 集合","slug":"技术-操作-学习-集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"}]},{"title":"Collections工具类","slug":"16-Collections工具类","date":"2022-04-23T03:09:00.000Z","updated":"2022-04-23T03:12:09.714Z","comments":false,"path":"posts/16.html","link":"","permalink":"https://dwhboke.com/posts/16.html","excerpt":"","text":"Collections工具类Collections工具类的介绍 Collections是一个操作Set、List和Map等集合的工具类 Collections中提供了一系列的静态的方法对集合元素进行排序、查询和修改等操作 排序操作：（均为static方法） reverse(List)：反转List中元素的顺序 Shuffle(List)：对List集合元素进行随机排序 sort(List)：根据元素的自然顺序对指定List集合元素按升序排列 sort(List，Comparator)：根据指定的Comparator产生的顺序对List集合元素进行排序 swap(List，int，int)：将指定的list集合中的i处元素和j处元素进行交换 查找、替换操作 Object max(Collection)：根据元素的自然顺序，返回给定集合中最大的元素 Object max(Collection,Comparator)：根据Comparator指定的顺序，返回给定集合中的最大元素 Object min(Collection) Object min(Collection,Comparator) int frequency(Collection,Object)：返回指定集合中指定元素出现的次数 void copy(List dest,List src)：将src中的内容复制到dest中 boolean replaceAll(List list,Object oldVal,Object newVal)：使用新值替换List对象的所有旧值","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 集合","slug":"技术-操作-学习-集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"}]},{"title":"总结-开发中如何选择集合实现类","slug":"15-(总结)开发中如何选择集合实现类","date":"2022-04-23T03:08:00.000Z","updated":"2022-04-23T03:08:36.030Z","comments":false,"path":"posts/15.html","link":"","permalink":"https://dwhboke.com/posts/15.html","excerpt":"","text":"总结-开发中如何选择集合实现类 先判断存储的类型（一组对象或者一组键值对） 一组对象：Collection接口 允许重复：List 增删多：LinkedList：因为底层维护了一个双向链表 改查多：ArrayList：底层维护了Object类型的可变数组 不允许重复：Set 无序：HashSet：底层是HashMap，维护了一个哈希表（数组+链表+红黑树） 排序：TreeSet 插入和取出一致：LinkedHashSet，维护数组+双向链表 一组键值对：Map接口 键无序：HashMap：底层是哈希表 数组+链表+红黑树 键排序：TreeMap 键插入和取出一致：LinkedHashMap 读取文件：Properties 集合关系图","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 集合","slug":"技术-操作-学习-集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"}]},{"title":"Map集合之Hashtable","slug":"14-Map集合之Hashtable类","date":"2022-04-23T03:07:00.000Z","updated":"2022-04-23T03:07:25.945Z","comments":false,"path":"posts/14.html","link":"","permalink":"https://dwhboke.com/posts/14.html","excerpt":"","text":"Hashtable类 存放的元素是键值对：K-V hashtable的键和值都不能为null，否则会抛出NullPointerException hashTable使用方法基本上和HashMap一样 hashTable是线程安全的（synchronized），hashMap是线程不安全的 底层有数组Hashtable$Entry[]，初始大小为11 临界值 threshold为：8 = 11*0.75 扩容是原先大小*2+1 Hashtable子类：Properties（与I/O流有关） Properties继承自Hashtable类并且实现了Map接口，也是使用一种键值对的形式来保存数据 它的使用特点和Hashtable类似 Properties还可以用于从xxx.properties文件中，加载数据到Properties类对象，并进行读取和修改 xxx.properties文件通常是作为配置文件","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 Map集合","slug":"技术-操作-学习-Map集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-Map%E9%9B%86%E5%90%88/"}]},{"title":"Map接口实现类的特点","slug":"13-Map接口实现类的特点（JDK8）","date":"2022-04-23T03:05:00.000Z","updated":"2022-04-23T03:20:57.315Z","comments":false,"path":"posts/13.html","link":"","permalink":"https://dwhboke.com/posts/13.html","excerpt":"","text":"Map接口实现类的特点（JDK8） Map与Collection并列存在，用于保存具有映射关系的数据：Key-Value（双列元素） Map中的Key和value可以是任何引用类型的数据，会封装到HashMap$Node对象中 Map中的Key不能重复，否则会替换 Map中的value可以重复 Map中Key和value都可以为Null，但是Key只能有一个Null（不可重复）,value可以有多个Null 常用String作为Map的key Key和value之间存在单向一对一的关系，即通过指定的key总能找到对应的value Map存放数据，一对k-v是放在一个HashMap$Node中的，因为Node实现了Entry接口，把k-v包装成一个entry存放在EntrySet集合中方便管理 常用方法map.put(); map.clear(); map.equals(); map.get(); map.set(); map.keySet(); map.values(); 遍历 用keySet遍历 for (Object obj:keySet){ System.out.println(obj +\"-\"+ map.get(obj)); } System.out.println(\"=====================\"); Iterator iterator = keySet.iterator(); while(iterator.hasNext()){ Object obj = iterator.next(); System.out.println(obj+\"-\"+map.get(obj)); } System.out.println(\"=====================\"); 用value遍历 Collection values = map.values(); //增强for for (Object obj : values){ System.out.println(obj); } System.out.println(\"===============迭代器================\"); Iterator iterator1 = values.iterator(); while (iterator1.hasNext()){ System.out.println(iterator1.next()); } 用EntrySet遍历 Set entrySet = map.entrySet(); //增强for for (Object obj : entrySet){ Map.Entry e = (Map.Entry) obj; System.out.println(e.getKey()+\"-\"+e.getValue()); } System.out.println(\"====================\"); //EntrySet迭代器 Iterator iterator2 = entrySet.iterator(); while (iterator2.hasNext()){ Object next = iterator2.next(); Map.Entry m = (Map.Entry) next; //System.out.println(next); System.out.println(m.getKey()+\"-\"+m.getValue()); } } 小结 Map接口的常用实现类：HashMap、Hashtable和Properties HashMap是Map接口使用频率最高的实现类 HashMap是以key-val对的形式来存储数据 Key不能重复，但是值可以重复，允许使用null键和null值 如果添加相同的Key，则会覆盖原来的key-val，等同于修改。（key不会替换，value会替换） 与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的 HashMap没有实现同步，因此是线程不安全的 注：集合与映射资料（非本博客） https://blog.csdn.net/weixin_59966683/article/details/119482419","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 Map集合","slug":"技术-操作-学习-Map集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-Map%E9%9B%86%E5%90%88/"}]},{"title":"Set接口的实现类","slug":"12-Set接口实现类","date":"2022-04-23T03:03:00.000Z","updated":"2022-04-23T03:04:48.494Z","comments":false,"path":"posts/12.html","link":"","permalink":"https://dwhboke.com/posts/12.html","excerpt":"","text":"Set接口实现类Set特性： HashSet实现了Set接口 HashSet实际上就是HashMap public HashSet(){ map = new HashMap&lt;&gt;(); } 可以存放null，但是只能有一个 HashSet不保证元素是有序的，取决于hash后，再确定索引的结果 不能有重复的元素，但是可以存放两个同名的不同对象，如下都能加入到set中。 set.add(new Dog(\"Tom\")); set.add(new Dog(\"Tom\")); Set一个经典面试题set.add(new String(\"abc\")); set.add(new String(\"abc\")); 只有第一个abc进入了set中 Set扩容机制 HashSet底层是HashMap 添加一个元素时，先得到hash值-会转成-&gt;索引值 找到存储数据表table，看到这个索引位置是否已经存放的有元素 如果有，则调用equals比较，如果相同则放弃添加，如果不同，则添加到最后 如果没有，直接加入 在java8中，如果一条链表的元素个数超过TREEIFY_THRESHOLD（默认是8），并且table的大小&gt;=MIN_TREEIFY_CAPACITY（默认64），就会进行树化（红黑树） Set添加元素实现 先获取元素的哈希值（hashCode方法） 对哈希值进行运算，得出一个索引值即为要存放在哈希表中的位置号 如果该位置上没有其他元素，则直接存放，如果位置上已经有其他元素则进行equal判断，如果相等，不添加，如果不等，则通过链表的方式添加 LinkHashSet LinkedHashSet加入顺序和取出元素/数据的顺序是一致的（有序） LinkedHashSet底层维护的是一个LinkedHashMap（是HashMap的子类） LinkedHashSet底层结构（数组table+双向链表） 添加第一次时，直接将数组table扩容到16，存放的结点类型是 LinkedHashMa$Entry 数组是HashMap$Node","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 Set集合","slug":"技术-操作-学习-Set集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-Set%E9%9B%86%E5%90%88/"}]},{"title":"构造器传入对象简析","slug":"11-构造器传入对象的简析","date":"2022-04-23T02:55:00.000Z","updated":"2022-04-23T02:56:13.030Z","comments":false,"path":"posts/11.html","link":"","permalink":"https://dwhboke.com/posts/11.html","excerpt":"","text":"class A { public void funA() { System.out.println(\"haha\"); } } class B { private A a; B(A a) { this.a = a; } //A a = new A(); public void funB() { a.funA(); } } class Test02 { public static void main(String[] args) { A a = new A(); B b = new B(a); //B a = new B(); b.funB(); } } 这种用法或者模式叫做代理模式 为什么需要代理模式呢？ 打个比方，假设你的 class A的那个方法funcA的功能是购物；通常情况下，你要去购物肯定可以亲自去商场买，这就是你所说的“直接new一个A类然后调用方法”。但是！假设你要买的东西国内没有，大部分情况下你不太可能亲自飞到海外去买吧，这时候你可以选择代购；什么意思呢？ 可以新建一个class C extends A，然后重写funcA方法，这个方法可以帮你去海外购物；于是使用类B就成了这样子： A c = new C(); // 注意这一行，父类A持有了子类的实现！ B b = new B(c); b.funcB();","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 构造器","slug":"技术-操作-学习-构造器","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%99%A8/"}]},{"title":"打印流","slug":"10-IO流之打印流","date":"2022-04-05T02:36:00.000Z","updated":"2022-04-05T02:39:43.655Z","comments":false,"path":"posts/10.html","link":"","permalink":"https://dwhboke.com/posts/10.html","excerpt":"","text":"打印流打印流只有输出流，没有输入流 PrintStream该类的关系图： OutputStream是所有字节流的父类，所有PrintStream也是字节流 默认情况下，OutputStream打印的位置是显示器(控制台)。 用System.setOut(new PrintStream(“ ”))方法修改打印流输出的位置 因为print底层使用的是write方法打印，所以可以直接使用write方法来打印，用print和write打印本质是一样的 记得关闭流 PrintWrite该类的关系图： Write是所有字符流的父类，所以PrintWrite是字符流 改变打印的位置 PrintWriter printWriter = new PrintWriter(new FileWriter(\"xxxxx\")); 记得关闭流，否则不会进到文件","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 java流","slug":"技术-操作-学习-java流","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E6%B5%81/"}]},{"title":"Java流","slug":"09-节点流和处理流","date":"2022-04-03T02:30:00.000Z","updated":"2022-04-03T02:31:19.630Z","comments":false,"path":"posts/9.html","link":"","permalink":"https://dwhboke.com/posts/9.html","excerpt":"","text":"节点流和处理流节点流和处理流的区别和联系 节点流是底层流，直接和数据源相连接 处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出 处理流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连 处理流的功能主要体现 性能的提高：主要以增加缓冲的方式提高输入输出的效率 操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加方便灵活","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 java流","slug":"技术-操作-学习-java流","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E6%B5%81/"}]},{"title":"Java内部类","slug":"08-内部类","date":"2022-03-24T03:14:00.000Z","updated":"2022-03-24T03:18:45.652Z","comments":false,"path":"posts/8.html","link":"","permalink":"https://dwhboke.com/posts/8.html","excerpt":"","text":"内部类内部类简介一个类里面包含了一个类结构，这个内部类可以直接访问私有属性，内部类是类的第五大成员（属性、方法、构造器、代码块、内部类） 内部类的使用某个接口或者一个抽象方法只需要用一次的时候，就可以用到内部类。 使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。——《Think in java》也就是说内部类拥有类的基本特征。(可以继承父类，实现接口)在实际问题中我们会遇到一些接口无法解决或难以解决的问题，此时我们可以使用内部类继承某个具体的或抽象的类，间接解决类无法多继承引起的一系列问题。 （注：内部类可以嵌套内部类，但是这极大的破坏了代码的结构，不推荐使用。） 内部类的优点 内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立 内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。 内部类提供了更好的封装，除了该外围类，其他类都不能访问。 创建内部类对象的时刻并不依赖于外围类对象的创建。具体来说，内部类信息（属性、方法）可以和外部类重名；内部类是具有类的基本特征的独立实体；可以利用访问修饰符隐藏内部类的实施细节，提供了更好的封装；静态内部类使用时可直接使用，不需先创造外部类。 内部类分类定义在外部类局部位置上（方法里）： 局部内部类（有类名） 匿名内部类（无类名） 定义在外部类的成员位置上： 成员内部类（没用static修饰） 静态内部类（使用static修饰） 局部内部类定义在外部类的局部位置，有类名。 可以直接访问外部类的所有成员，包括私有的 不能添加访问修饰符，因为它的位置是一个局部变量，局部变量不能用修饰符的，但是可以用final修饰，因为局部变量也可以用final。 作用域：仅仅在定义它的方法或者代码块里。 局部内部类访问直接访问外部类的成员 外部类访问局部内部类，要先创建对象（在外部类里创建内部类的对象，在main方法创建外部类对象，用外部类对象调用内部类的代码块或者定义它的方法），再访问，而且必须在作用域内。 外部其他类不能访问局部内部类（因为局部内部类地位是一个局部变量） 如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想要访问外部类的成员，可以使用（外部类名.this.成员）去访问 System.out.println(\"外部类的n2=\" + 外部类名.this.n2); 匿名内部类 匿名内部类申明的地点和局部内部类一样，都是在方法或者代码块中，地位都等价于局部变量，因此在局部内部类中的限制在匿名内部类中一样适用 匿名内部类也可以直接访问外部类的所有成员，包括私有的 不能添加任何的访问修饰符 作用域：在整个方法或者代码块 可以直接访问外部类的成员 外部类访问匿名内部类，要先创建对象（在外部类里创建内部类的对象，在main方法创建外部类对象，用外部类对象调用内部类的代码块或者定义它的方法），再访问，而且必须在作用域内。 外部其他类不能访问局部内部类（因为局部内部类地位是一个局部变量） 如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想要访问外部类的成员，可以使用（外部类名.this.成员）去访问 匿名内部类的使用 被当做实参，直接传递 public static void main(String[] args) { f1(new IL(){ public void show(){ System.out.println(\"xxx\"); } }); } public static void f1(IL il){ il.show(); } interface IL{ public void show(); } 成员内部类 可以用任何的修饰符 内部类的内部不能有静态信息 内部类也是类，可以继承，可重写，可以重载，this 和 super 可以使用。 内部类可以直接使用外部类的任何信息 其它类如何访问内部类： Outer outer = new Outer(); //创造内部类对象 Outer.Inner inner = outer.new Inner(); inner.innerShow(); 成员内部类认为是外部类的成员信息。 静态内部类静态内部类是内部类中一个比较特殊的情况，Java 文档中是这样描述静态内部类的：一旦内部类使用 static 修饰，那么此时这个内部类就升级为顶级类。也就是说，除了写在一个类的内部以外，静态内部类具备所有外部类的特性。 静态内部类也是定义在外部类的成员位置上，而且有static修饰。 可以直接访问外部类所有的静态成员，包括私有的，但是不能访问非静态成员。 可以添加任何的修饰符。 作用域：和成员内部类一样，作用整个类体 静态内部类访问外部类静态成员：直接用 外部类访问静态内部类：创建对象，再访问 其他类访问静态内部类：利用 外部类.内部类 引用 = new 外部类.内部类(); 然后利用 引用.成员信息(属性、方法) 调用。 外部类和内部类成员同名，遵循就近原则，如要访问外部类成员，则使用（外部类.成员）访问。","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 java内部类","slug":"技术-操作-学习-java内部类","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E5%86%85%E9%83%A8%E7%B1%BB/"}]},{"title":"Java方法的调用","slug":"07-java方法的调用细节","date":"2022-03-20T13:37:00.000Z","updated":"2022-03-20T13:41:51.762Z","comments":false,"path":"posts/7.html","link":"","permalink":"https://dwhboke.com/posts/7.html","excerpt":"","text":"方法调用的细节同类中方法对方法的调用同类中非静态方法调用同类的其他方法，可以直接方法名调用 静态方法不能访问非静态成员（变量和方法） 不同类之间方法的调用在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。 实例方法只有“对象名.方法名”这种方式。也就是说，调用静态方法可以无需创建对象。（即创建需要调用的方法的类的对象，然后用对象调用） class A{ public void pa(){} } class B{ A a1 = new A(); public void b(){ a.pa(); } } 传参机制java中，基本数据类型传参，是按值拷贝，形参不会影响实参。 引用类型传参是按照地址传参，形参会影响实参。","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 javaI方法","slug":"技术-操作-学习-javaI方法","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-javaI%E6%96%B9%E6%B3%95/"}]},{"title":"JavaIO流入门","slug":"06-IO流","date":"2022-03-09T13:00:00.000Z","updated":"2022-03-09T12:56:27.497Z","comments":false,"path":"posts/6.html","link":"","permalink":"https://dwhboke.com/posts/6.html","excerpt":"","text":"IO流（文件）文件文件是保存数据的地方 文件流文件在程序中是以流的形式来操作的 流：数据在数据源(文件)和程序(内存)直接经历的路径 输入流：数据从数据源(文件)到程序(内存)的路径 输出流：数据从程序(内存)到数据源(文件)的路径 常用的文件操作创建文件对象相关构造器和方法 相关方法： new File(String pathname)//根据路径构建一个File对象 new File(File parent,String child)//根据父目录文件+子路径构建 new File(String parent,String child)//根据父目录+子路径构建 createNewFile //创建新文件 获取文件的相关信息 获取文件名字：file.getName() 获取文件绝对路径：file.getAbsolutePath() 获取文件父目录：file.getParent() 文件大小(按字节统计)：file.length() 判断文件是否存在：file.exists() 判断是否是一个文件：file.isFile() 判断是否是一个目录：file.isDirectory() 目录的操作和文件的删除创建一级目录：mkdir() 创建多级目录：mkdirs() 删除空目录或者文件：delete()","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 javaIO流","slug":"技术-操作-学习-javaIO流","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-javaIO%E6%B5%81/"}]},{"title":"Java泛型入门","slug":"05-Java泛型","date":"2022-03-07T13:58:00.000Z","updated":"2022-03-07T14:13:11.035Z","comments":false,"path":"posts/5.html","link":"","permalink":"https://dwhboke.com/posts/5.html","excerpt":"","text":"泛型的理解和好处 编译时，检查添加元素的类型，提高了安全性 减少了类型转换次数，提高了效率 不再提示编译警告 泛型介绍泛（广泛）型（类型）=&gt;Integer,String,Dog 泛型又叫参数化类型，是jdk5.0出现的新特性，解决数据类型的安全性问题。 在类声明或实例化时只要制定好需要的具体类型即可。 JAVA泛型可以保证如果程序在编译时没有警告，运行时就不会产生ClassCastException异常，同时，代码更加简洁。 泛型的作用是：可以在声明类时通过一个标识表示类中的某一个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。 泛型的语法泛型的声明其中，T,K,V不代表值，而是表示类型 任何字母都可以。 interface 接口&lt;T&gt;{} interface 接口&lt;T,V&gt;{} 泛型的实例化要在类名后面指定类型参数的值。例如： List&lt;String&gt; strList = new ArrayList&lt;String&gt;(); Iterator&lt;Customer&gt; iterator = customers.iterator(); 泛型使用的细节 注意泛型使用的时候是加入引用类型不是数据类型，比如，加入Integer是正确的，加入int就错误。 在指定泛型具体类型后，可以传入该类型或者子类类型 泛型使用形式 List&lt;Integer&gt;list1 = new ArrayList&lt;Integer&gt;(); List&lt;Integer&gt;list2 = new ArrayList&lt;&gt;();[说明：] 如果我们这样写 List list3 = new ArrayList(); 默认给它的泛型是&lt;E&gt; E就是Object。","categories":[{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"}],"tags":[{"name":"技术 操作 学习 java泛型","slug":"技术-操作-学习-java泛型","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E6%B3%9B%E5%9E%8B/"}]},{"title":"集合的基础体系","slug":"04-集合基础","date":"2022-03-06T06:54:00.000Z","updated":"2022-04-23T03:12:44.706Z","comments":false,"path":"posts/4.html","link":"","permalink":"https://dwhboke.com/posts/4.html","excerpt":"","text":"集合框架体系图单列集合 双列集合 集合的优点 可以动态保存任意的多个对象，使用很方便 提供了一系列方便的操作对象的方法：add、remove、set、get等等 使用集合进行添加，删除新元素的示意代码简洁明了 集合简单的使用ArrayList一次放一个数据所以叫单列集合 ArrayList arrayList = new ArrayList(); arrayList.add(\"jake\"); arrayList.add(\"tom\"); HashMap一次放两个数据所以叫双列集合 HashMap hashMap = new HashMap(); hashMap.put(\"NO1\",\"北京\"); hashMap.put(\"NO2\",\"上海\"); Collection接口和常用方法collection接口实现类的特点public interface Collection&lt;E&gt; extends lterable&lt;E&gt; collection实现子类可以存放多个元素，每个元素可以是Object 有些Collection的实现类，可以存放重复的元素，有些不可以 有些Collection的实现类，有些是有序的(List)，有些不是有序的(Set) Collection接口没有直接的实现子类，是通过它的子接口Set和List来实现的 常用方法 add：添加单个元素 remove：删除指定元素 contains：查找元素是否存在 size：获取元素个数 isEmpty：判断是否为空 clear：清空 addAll：添加多个元素 containsAll：查找多个元素是否都存在 removeAll：删除多个元素 Vector和ArrayList的比较","categories":[{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"}],"tags":[{"name":"技术 操作 学习 java集合","slug":"技术-操作-学习-java集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E9%9B%86%E5%90%88/"}]},{"title":"如何在GitHub上搭建hexo博客","slug":"03-如何在GitHub上搭建hexo博客","date":"2022-03-05T10:39:00.000Z","updated":"2022-03-06T04:02:28.897Z","comments":false,"path":"posts/3.html","link":"","permalink":"https://dwhboke.com/posts/3.html","excerpt":"","text":"介绍这是一篇关于如何搭建 hexo 博客的文章。 一、大致所需要用到的工具或者网站 GitHub Git Bash HEXO 二、主要步骤 配置好上述工具 创建一个 GitHub 仓库 GitHub 上生成 SSH Keys 生成本地 发布到互联网上 三、具体操作1. 安装Git 和 HEXO这个东西直接去官方网站下载就行了。Git 官网 HEXO官网 2. 创建一个GitHub 仓库在注册好GitHub账号之后，然后去创建一个新的仓库(点击此处的New) 然后此处的Repository name和你的Owner要一样(比如，我的owner是dgithubq,那么name就填dgithubq.github.io)。页面其他的选项默认即可。 然后Add a README file需要勾选上。 到此，点击创建之后，那么你的存储库就已经建成功了，你的博客网址就是你刚才的Repository name。 3. 生成一个SSH Keys这个东西很重要，因为后面上传到网络上面去的时候需要它，所以这一步要仔细一点。但是也不会特别的难。 首先：我们在桌面上进入任何一个文件夹，然后打开下载好的Git Bash，然后我们需要敲打以下的命令来检查ssh是否安装，默认一般是已经安装了： ssh 然后敲打第二个命令来生成SSH Keys（引号中填自己的邮箱）： ssh-keygen -t rsa -C \"xxx@xxx.xxx\" 此时会在我们的文件夹中建立一个ssh，一般会存放在C:\\用户\\Administrator\\.ssh中。 找到文件夹之后，打开其中的id_rsa.pub文件，完全复制其中的内容，然后再去打开GitHub。 在个人设置中找到这个地方： 在里面New SSH key，然后会看到以下需要填的内容： Title中随便取，无所谓，key中填入刚才.pub文件里复制的内容，然后在git bash中输入以下命令测试是否绑定成功即可： ssh -T git@github.com 4. 生成本地博客去一个自己喜欢的地方建一个文件夹，然后在此文件夹中打开git bash,然后开始敲命令： (1) 初始化hexo hexo init 如果没有出现 INFO Start blogging with Hexo！ 就说明有问题，重新执行上面的命令即可，成功之后，刚才的文件夹中会多出很多文件，比如： (2) 静态生成hexo本地页面 hexo s 成功后会出现一个Http://xxx的网址，可以去网页中打开，这就是同志们博客的本地生成的页面。 5. 将博客发布到互联网上(1) 在上一步中生成的文件中，打开_config.yml文件，修改deploy中的东西，一般在最下面。 deploy: type: git repository: https://github.com/XXX/XXX.github.io.git branch: main (2)在你的博客文件下打开git bash输入以下命令，这是安装hexo-deployer-git自动部署工具 npm install hexo-deployer-git --save 生成页面 hexo g 上传到GitHub仓库(很多人第一次上传，由于GitHub是一个国外的服务器，所以第一次会非常难成功，如果没有弹出输入GitHub账号的弹窗，请多试验几次，总会成功的，博主命不好，试了很多次才成功，总之坚持就是胜利！) hexo d 出现这个就是成功了： 这第一个弹窗是输入用户名，下面还有一个弹窗需要注意了！！！ 出现这个弹窗之后，要去到GitHub中个人设置里找到Developer setting开发者设置中创建一个令牌，随便取一个名字，权限为了减少麻烦，建议全选，然后把出现的序列号填入第二个弹窗中。(千万不要直接输入GitHub的密码，可能会导致错误，一旦错误，以上步骤又要重来) 上传成功之后，你的博客就传到互联网上了，你的博客网址就是你的仓库名。 总结以上就是本人自己创建博客的步骤，个人觉得比较详细，应该不会有太大问题，祝各位好运啦~~~!","categories":[{"name":"技术 学习","slug":"技术-学习","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"技术 操作 想法","slug":"技术-操作-想法","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E6%83%B3%E6%B3%95/"}]},{"title":"博客与博主","slug":"01-博客诞生","date":"2022-03-04T13:00:00.000Z","updated":"2022-03-06T04:14:59.793Z","comments":false,"path":"posts/1.html","link":"","permalink":"https://dwhboke.com/posts/1.html","excerpt":"","text":"相遇皆是缘分 为什么建博客？肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛! 展望博客我会整理一些个人所学的知识或生活方面有兴趣的事发到博客上供大家观摩 关于博主一位准备放飞理想的有志青年，常年emo，喜欢dyn 林深时见鹿，海蓝时见鲸，梦醒时见你 溜了溜了！","categories":[{"name":"生活","slug":"生活","permalink":"https://dwhboke.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://dwhboke.com/tags/%E6%83%B3%E6%B3%95/"}]},{"title":"测试文章","slug":"02-测试文章","date":"2022-03-04T06:00:00.000Z","updated":"2022-03-21T13:56:20.678Z","comments":false,"path":"posts/2.html","link":"","permalink":"https://dwhboke.com/posts/2.html","excerpt":"","text":"测试本章仅用于测试！！！ --dwh","categories":[{"name":"生活","slug":"生活","permalink":"https://dwhboke.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"试验","slug":"试验","permalink":"https://dwhboke.com/tags/%E8%AF%95%E9%AA%8C/"}]}],"categories":[{"name":"反射","slug":"反射","permalink":"https://dwhboke.com/categories/%E5%8F%8D%E5%B0%84/"},{"name":"设计模式","slug":"设计模式","permalink":"https://dwhboke.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"java 框架","slug":"java-框架","permalink":"https://dwhboke.com/categories/java-%E6%A1%86%E6%9E%B6/"},{"name":"技术 学习 java 异常","slug":"技术-学习-java-异常","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E5%BC%82%E5%B8%B8/"},{"name":"技术 学习 java 多线程","slug":"技术-学习-java-多线程","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"技术 学习 java 泛型","slug":"技术-学习-java-泛型","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E6%B3%9B%E5%9E%8B/"},{"name":"技术 学习 java 集合","slug":"技术-学习-java-集合","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java-%E9%9B%86%E5%90%88/"},{"name":"技术 学习 java","slug":"技术-学习-java","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0-java/"},{"name":"技术 学习","slug":"技术-学习","permalink":"https://dwhboke.com/categories/%E6%8A%80%E6%9C%AF-%E5%AD%A6%E4%B9%A0/"},{"name":"生活","slug":"生活","permalink":"https://dwhboke.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"技术 操作 java","slug":"技术-操作-java","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-java/"},{"name":"技术 操作 设计模式","slug":"技术-操作-设计模式","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"技术 操作 框架","slug":"技术-操作-框架","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E6%A1%86%E6%9E%B6/"},{"name":"技术 操作 学习 异常","slug":"技术-操作-学习-异常","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E5%BC%82%E5%B8%B8/"},{"name":"技术 操作 学习 多线程","slug":"技术-操作-学习-多线程","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"技术 操作 学习 泛型","slug":"技术-操作-学习-泛型","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"},{"name":"技术 操作 学习 集合","slug":"技术-操作-学习-集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"},{"name":"技术 操作 学习 Map集合","slug":"技术-操作-学习-Map集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-Map%E9%9B%86%E5%90%88/"},{"name":"技术 操作 学习 Set集合","slug":"技术-操作-学习-Set集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-Set%E9%9B%86%E5%90%88/"},{"name":"技术 操作 学习 构造器","slug":"技术-操作-学习-构造器","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-%E6%9E%84%E9%80%A0%E5%99%A8/"},{"name":"技术 操作 学习 java流","slug":"技术-操作-学习-java流","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E6%B5%81/"},{"name":"技术 操作 学习 java内部类","slug":"技术-操作-学习-java内部类","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E5%86%85%E9%83%A8%E7%B1%BB/"},{"name":"技术 操作 学习 javaI方法","slug":"技术-操作-学习-javaI方法","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-javaI%E6%96%B9%E6%B3%95/"},{"name":"技术 操作 学习 javaIO流","slug":"技术-操作-学习-javaIO流","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-javaIO%E6%B5%81/"},{"name":"技术 操作 学习 java泛型","slug":"技术-操作-学习-java泛型","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E6%B3%9B%E5%9E%8B/"},{"name":"技术 操作 学习 java集合","slug":"技术-操作-学习-java集合","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E5%AD%A6%E4%B9%A0-java%E9%9B%86%E5%90%88/"},{"name":"技术 操作 想法","slug":"技术-操作-想法","permalink":"https://dwhboke.com/tags/%E6%8A%80%E6%9C%AF-%E6%93%8D%E4%BD%9C-%E6%83%B3%E6%B3%95/"},{"name":"想法","slug":"想法","permalink":"https://dwhboke.com/tags/%E6%83%B3%E6%B3%95/"},{"name":"试验","slug":"试验","permalink":"https://dwhboke.com/tags/%E8%AF%95%E9%AA%8C/"}]}